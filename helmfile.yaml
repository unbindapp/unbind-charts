# helmfile.yaml
# Main Helmfile configuration
# Repositories
repositories:
  # - name: longhorn
  #   url: https://charts.longhorn.io
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
  - name: postgres-operator
    url: https://opensource.zalando.com/postgres-operator/charts/postgres-operator
  - name: grafana
    url: https://grafana.github.io/helm-charts 
  - name: dex
    url: https://charts.dexidp.io
  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx
  - name: jetstack
    url: https://charts.jetstack.io
  - name: bitnami
    url: https://charts.bitnami.com/bitnami

values:
 - baseDomain: example.com
 - namespace: unbind-system

# Environment values are loaded from environment-specific files
environments:
  default:
    values:
      - environments/default.yaml
# Configure "requires" for dependencies between releases
helmDefaults:
  wait: true
  timeout: 600
  atomic: true
  createNamespace: true
---
# Releases
releases:
  # Managed Helm Charts with version locks
  # - name: longhorn
  #   namespace: {{ .Values.namespace }}
  #   chart: longhorn/longhorn
  #   version: 1.8.1 # Lock to specific version for compatibility
  #   hooks:
  #   - events: ["presync"]
  #     showlogs: true
  #     command: /bin/sh
  #     args:
  #       - -c
  #       - |
  #         echo "Removing default annotation from any existing default StorageClasses..."
  #         for sc in $(kubectl get storageclass -o jsonpath='{.items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")].metadata.name}'); do
  #           echo "Removing default annotation from StorageClass $sc"
  #           kubectl patch storageclass $sc -p '{"metadata": {"annotations": {"storageclass.kubernetes.io/is-default-class": "false"}}}'
  #         done
  #         echo "Done removing default annotation from existing StorageClasses"
  #   values:
  #     - values/longhorn.yaml
  #     # This is where we add dynamic values that get merged into the chart
  #     - persistence:
  #         defaultClass: {{ .Values | get "overrides.longhorn.persistence.defaultClass" true }}
  #         defaultClassReplicaCount: {{ .Values | get "overrides.longhorn.persistence.defaultClassReplicaCount" }}
  #         reclaimPolicy: {{ .Values | get "overrides.longhorn.persistence.reclaimPolicy" }}
  #       defaultSettings:
  #         defaultReplicaCount: {{ .Values | get "overrides.longhorn.defaultSettings.defaultReplicaCount" }}
  #   labels:
  #     component: storage
  #     installed: {{ .Values | get "components.longhorn.enabled" true }}

  - name: kube-prometheus-stack
    namespace: {{ .Values.namespace }}
    chart: prometheus-community/kube-prometheus-stack
    version: 70.4.0 
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            echo "Installing Prometheus Operator CRDs..."
            for CRD in alertmanagerconfigs alertmanagers podmonitors probes prometheuses prometheusrules servicemonitors thanosrulers; do
              kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.60.0/example/prometheus-operator-crd/monitoring.coreos.com_${CRD}.yaml
            done
            echo "Prometheus Operator CRDs installed"
    values:
      - values/kube-prometheus-stack.yaml
      - prometheus:
          prometheusSpec:
            retention: {{ .Values | get "overrides.kubePrometheusStack.retention" }}
            storageSpec:
              volumeClaimTemplate:
                spec:
                  resources:
                    requests:
                      storage: {{ .Values | get "overrides.kubePrometheusStack.storage" }}
    labels:
      component: monitoring
      installed: {{ .Values | get "components.kubePrometheusStack.enabled" true }}

  - name: alloy
    namespace: {{ .Values.namespace }}
    chart: grafana/alloy
    version: 0.12.6
    values:
      - 
        alloy:
          mounts:
            varlog: true
          configMap:
            content: |
              logging {
                level  = "info"
                format = "logfmt"
              }
              discovery.kubernetes "pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-team,unbind-project,unbind-environment,unbind-service,unbind-deployment"
                }
              }
              discovery.kubernetes "deployment_pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-deployment-build"
                }
              }
              discovery.relabel "pods" {
                targets = discovery.kubernetes.pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_team"]
                  target_label  = "unbind_team"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_project"]
                  target_label  = "unbind_project"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_environment"]
                  target_label  = "unbind_environment"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_service"]
                  target_label  = "unbind_service"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_deployment"]
                  target_label  = "unbind_deployment"
                }
              }
              discovery.relabel "deployment_pods" {
                targets = discovery.kubernetes.deployment_pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_deployment_build"]
                  target_label  = "unbind_deployment_build"
                }
              }
              loki.source.kubernetes "pods" {
                targets = discovery.relabel.pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.source.kubernetes "deployment_pods" {
                targets = discovery.relabel.deployment_pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.write "endpoint" {
                endpoint {
                  url = "http://{{ .Values | get "overrides.alloy.loki.endpoint.host" }}.{{ .Values | get "overrides.alloy.loki.namespace" .Values.namespace }}.svc.cluster.local:{{ .Values | get "overrides.alloy.loki.endpoint.port" "80" }}/loki/api/v1/push"
                  tenant_id = "local"
                }
              }

    labels:
      component: alloy
      installed: {{ .Values | get "components.alloy.enabled" true }}

  - name: loki
    namespace: {{ .Values.namespace }}
    chart: grafana/loki
    version: 6.29.0
    values:
      - 
        loki:
          auth_enabled: false
          commonConfig:
            replication_factor: 1
          schemaConfig:
            configs:
              - from: "2024-04-01"
                store: tsdb
                object_store: s3
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h    
          pattern_ingester:
            enabled: true
          limits_config:
            max_concurrent_tail_requests: 100
            allow_structured_metadata: true
            volume_enabled: true
            retention_period: {{ .Values | get "overrides.loki.retentionPeriod" }} 
          ruler:
            enable_api: true
          tableManager:
            retention_deletes_enabled: true
            retention_period: {{ .Values | get "overrides.loki.retentionPeriod" }}

        resultsCache:
          enabled: false

        chunksCache:
          enabled: false

        lokiCanary:
          enabled: false

        test:
          enabled: false

        minio:
          enabled: true
          persistence:
            enabled: true
            size: {{ .Values | get "overrides.loki.minioStorageSize" }}

        deploymentMode: SingleBinary
        singleBinary:
          replicas: 1
          persistence:
            enabled: false
          extraVolumes:
            - name: loki-data
              emptyDir: {}
          extraVolumeMounts:
            - name: loki-data
              mountPath: /var/loki

        # Zero out replica counts of other deployment modes
        backend:
          replicas: 0
        read:
          replicas: 0
        write:
          replicas: 0
        ingester:
          replicas: 0
        querier:
          replicas: 0
        queryFrontend:
          replicas: 0
        queryScheduler:
          replicas: 0
        distributor:
          replicas: 0
        compactor:
          replicas: 0
        indexGateway:
          replicas: 0
        bloomCompactor:
          replicas: 0
        bloomGateway:
          replicas: 0


    labels:
      component: loki
      installed: {{ .Values | get "components.loki.enabled" true }}

  - name: buildkit
    namespace: {{ .Values.namespace }}
    chart: ./charts/buildkitd
    values:
      - 
        resources: {}
        replicaCount: {{ .Values | get "overrides.buildkitd.replicas" }}
        image: {{ .Values | get "overrides.buildkitd.image" }}
        registries:
          - url: {{ .Values | get "overrides.buildkitd.registry" (printf "docker-registry.%s:5000" (.Values.namespace)) }}
            http: true
            insecure: true

    labels:
      component: build
      installed: {{ .Values | get "components.buildkitd.enabled" true }}

  - name: postgres-operator
    namespace: {{ .Values.namespace }}
    chart: postgres-operator/postgres-operator
    version: 1.14.0
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            echo "Installing Postgres Operator CRDs..."
            kubectl apply -f https://raw.githubusercontent.com/zalando/postgres-operator/refs/tags/v1.14.0/manifests/operatorconfiguration.crd.yaml
            kubectl apply -f https://raw.githubusercontent.com/zalando/postgres-operator/refs/tags/v1.14.0/manifests/postgresql.crd.yaml
            echo "Postgres Operator CRDs installed"
    values:
      - 
        configGeneral:
          docker_image: {{ .Values | get "overrides.postgresOperator.spiloImage" }}
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 10m
            memory: 50Mi
        configKubernetes:
          inherited_labels:
            - unbind-team
            - unbing-project
            - unbind-environment
            - unbind-service
            - unbind-deployment
            - unbind-is-system-db
            # Helm labels
            - app.kubernetes.io/managed-by
            - app.kubernetes.io/name
            - app.kubernetes.io/instance
            - app.kubernetes.io/version
            - helm.sh/chart
            # Unbind custom definition labels
            - unbind/usd-name
            - unbind/usd-version
            - unbind/usd-category

    labels:
      component: postgres-operator
      installed: {{ .Values | get "components.postgresOperator.enabled" true }}
  
  - name: database
    namespace: {{ .Values.namespace }}
    chart: ./charts/database
    needs:
      - postgres-operator
    values:
      - 
        replicaCount: {{ .Values | get "overrides.database.replicaCount" }}
        storage: {{ .Values | get "overrides.database.storage" }}
        resources:
          requests:
            memory: "10Mi" 
            cpu: "10m"    
          limits:
            cpu: {{ .Values | get "overrides.database.resources.limits.cpu" }}
            memory: {{ .Values | get "overrides.database.resources.limits.memory" }}
    labels:
      component: database
      installed: {{ .Values | get "components.database.enabled" true }}

  - name: valkey
    namespace: {{ .Values.namespace }}
    chart: bitnami/valkey
    version: 3.0.1
    values:
      - architecture: standalone
        auth:
          enabled: false
        commonConfiguration: |-
          appendonly yes
          protected-mode no
        persistence:
          enabled: true
          size: 1Gi
        primary:
          replicaCount: 1
          resources:
            requests:
              memory: "10Mi" 
              cpu: "10m"
            limits:
              memory: 192Mi
              cpu: 200m
        replica:
          replicaCount: 0
    labels:
      component: valkey
      installed: {{ .Values | get "components.valkey.enabled" true }}

  - name: registry
    namespace: {{ .Values.namespace }}
    chart: ./charts/registry
    values:
      - 
        replicaCount: {{ .Values | get "overrides.registry.replicaCount" }}
        persistence:
          size: {{ .Values | get "overrides.registry.persistence.size" }}
        service:
          nodePort: {{ .Values | get "overrides.registry.service.nodePort" }}
        cleanup:
          threshold: {{ .Values | get "overrides.registry.cleanup.threshold" }} # This should be around 80% of the total size, this is for the auto cleanup job

    labels:
      component: registry
      installed: {{ .Values | get "components.registry.enabled" true }}

  # Added ingress-nginx as a daemonset
  - name: ingress-nginx
    namespace: {{ .Values.namespace }}
    chart: ingress-nginx/ingress-nginx
    version: 4.12.1
    values:
      - 
        controller:
          kind: DaemonSet
          image:
            registry: registry.k8s.io
            image: ingress-nginx/controller
            tag: "v1.12.1"
            digest: sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          ingressClassResource:
            name: nginx
            default: true
          admissionWebhooks:
            enabled: true
          service:
            enabled: true
            type: LoadBalancer
            externalTrafficPolicy: Local
          config:
            use-forwarded-headers: "true"
            compute-full-forwarded-for: "true"
            use-proxy-protocol: "false"
            allow-snippet-annotations: "true"
        rbac:
          create: true
          scope: false
        serviceAccount:
          create: true
    labels:
      component: ingress
      installed: {{ .Values | get "components.ingressNginx.enabled" true }}

  # Added cert-manager for SSL certificates
  - name: cert-manager
    namespace: {{ .Values.namespace }}
    chart: jetstack/cert-manager
    version: 1.17.1
    values:
      - 
        installCRDs: true
        replicaCount: {{ .Values | get "overrides.certManager.replicaCount" 1 }}
        ingressShim:
          defaultIssuerName: letsencrypt-prod
          defaultIssuerKind: ClusterIssuer
          defaultIssuerGroup: cert-manager.io
    labels:
      component: cert-manager
      installed: {{ .Values | get "components.certManager.enabled" true }}
    
    # Hook to create ClusterIssuer after cert-manager installation
    hooks:
      - events: ["postsync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            cat <<EOF | kubectl apply -f -
            apiVersion: cert-manager.io/v1
            kind: ClusterIssuer
            metadata:
              name: letsencrypt-prod
            spec:
              acme:
                server: https://acme-v02.api.letsencrypt.org/directory
                email: "admin@{{ .Values.baseDomain }}"
                privateKeySecretRef:
                  name: letsencrypt-prod
                solvers:
                - http01:
                    ingress:
                      class: nginx
            EOF

  - name: dex
    namespace: {{ .Values.namespace }}
    chart: dex/dex
    version: 0.23.0 
    needs:
      - postgres-operator
      - database
    hooks:
      # Pre-install hook to generate secrets if they don't exist
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            # Check if client secrets exist, create if not
            if ! kubectl get secret -n {{ .Values.namespace }} dex-client-secrets &> /dev/null; then
              # Generate random secrets
              CLIENT_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
              CONNECTOR_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
              
              # Create the secret
              kubectl create secret generic dex-client-secrets \
                --namespace={{ .Values.namespace }} \
                --from-literal=unbind-api-secret="${CLIENT_SECRET}" \
                --from-literal=connector-oidc-secret="${CONNECTOR_SECRET}"
              
              echo "Created new client and connector secrets for Dex"
            else
              echo "Dex client secrets already exist, using existing values"
            fi

            # Check if Certificate resource exists, create if not
            if ! kubectl get certificate -n {{ .Values.namespace }} dex-certificate &> /dev/null; then
              echo "Creating Certificate resource for Dex TLS..."
              cat <<EOF | kubectl apply -f -
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: dex-certificate
                namespace: {{ .Values.namespace }}
                annotations:
                  acme.cert-manager.io/issue-temporary-certificate: "true"
              spec:
                secretName: dex-tls
                issuerRef:
                  name: {{ .Values | get "overrides.dex.ingress.certIssuer" "letsencrypt-prod" }}
                  kind: ClusterIssuer
                dnsNames:
                  - {{ .Values | get "overrides.dex.host" (printf "dex.%s" .Values.baseDomain) }}
              EOF
              echo "Certificate resource created for Dex"
            else
              echo "Certificate resource for Dex already exists"
            fi

            # Check if TLS secret exists, create an emergency temporary one if not
            if ! kubectl get secret -n {{ .Values.namespace }} dex-tls &> /dev/null; then
              echo "Creating emergency temporary TLS certificate for Dex"
              
              # Generate temporary self-signed certificate
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout /tmp/tls.key -out /tmp/tls.crt \
                -subj "/CN=dex.{{ .Values.baseDomain }}"
              
              # Create the secret with the temporary certificate
              kubectl create secret tls dex-tls \
                --namespace={{ .Values.namespace }} \
                --cert=/tmp/tls.crt \
                --key=/tmp/tls.key
              
              # Clean up
              rm -f /tmp/tls.key /tmp/tls.crt
              
              echo "Created emergency temporary TLS secret for Dex"
            else
              echo "Dex TLS secret already exists"
            fi

    values:
      - 
        # Image configuration with dynamic version
        image:
          repository: ghcr.io/dexidp/dex
          tag: "{{ .Values | get "overrides.dex.version" "v2.42.0" }}"
          pullPolicy: IfNotPresent

        # Dynamically set replica count
        replicaCount: {{ .Values | get "overrides.dex.replicaCount" 2 }}

        # Enable HTTPS endpoint
        https:
          enabled: true

        # Use external secrets for the configuration
        configSecret:
          create: true

        # Dex configuration
        config:
          issuer: {{ .Values | get "overrides.dex.issuer" (printf "https://dex.%s" .Values.baseDomain) }}
          storage:
            type: postgres
            config:
              host: {{ .Values | get "overrides.dex.postgres.host" (printf "pg-unbind.%s" .Values.namespace) }}
              port: {{ .Values | get "overrides.dex.postgres.port" 5432 }}
              database: {{ .Values | get "overrides.dex.postgres.database" "dex" }}
              user: {{ printf "$%s" "POSTGRES_USER" }}
              password: {{ printf "$%s" "POSTGRES_PASSWORD" }}
              ssl:
                mode: {{ .Values | get "overrides.dex.postgres.ssl.mode" "disable" }}
          web:
            https: 0.0.0.0:5556
            tlsCert: /etc/dex/tls/tls.crt
            tlsKey: /etc/dex/tls/tls.key
          issuers: {{ .Values | get "overrides.dex.issuers" (list (printf "https://dex.%s" .Values.baseDomain) (printf "https://dex.%s.svc.cluster.local:5556" .Values.namespace)) | toYaml | nindent 12 }}
          oauth2:
            skipApprovalScreen: {{ .Values | get "overrides.dex.oauth2.skipApprovalScreen" true }}
            responseTypes: {{ .Values | get "overrides.dex.oauth2.responseTypes" (list "code") | toYaml | nindent 14 }}
            alwaysIssueOfflineToken: {{ .Values | get "overrides.dex.oauth2.alwaysIssueOfflineToken" true }}
          expiry:
            idTokens: {{ .Values | get "overrides.dex.expiry.idTokens" "1h" }}
            accessTokens: {{ .Values | get "overrides.dex.expiry.accessTokens" "1h" }}
            refreshTokens:
              validIfNotUsedFor: {{ .Values | get "overrides.dex.expiry.refreshTokens.validIfNotUsedFor" "336h" }}
              disableRotation: {{ .Values | get "overrides.dex.expiry.refreshTokens.disableRotation" true }}
          connectors:
            {{ .Values | get "overrides.dex.connectors" (list (dict
              "type" "oidc"
              "id" "unbind-oidc"
              "name" "Unbind Built-in OIDC Provider"
              "config" (dict
                "issuer" (printf "https://unbind.%s/oauth2/api" .Values.baseDomain)
                "clientID" "dex-client"
                "clientSecret" (printf "$%s" "CONNECTOR_SECRET")
                "redirectURI" (printf "https://dex.%s/callback" .Values.baseDomain)
                "scopes" (list "openid" "profile" "email" "offline_access" "groups")
                "insecureEnableGroups" true
                "discoveryURL" (printf "https://unbind.%s/oauth2/api/.well-known/openid-configuration" .Values.baseDomain)
                "userIDKey" "jti"
                "claimMapping" (dict "email" "email" "name" "name" "groups" "groups")
              )
            )) | toYaml | nindent 12 }}
          staticClients:
            - id: unbind-api
              secret: {{ printf "$%s" "CLIENT_SECRET" }}
              name: Unbind API
              redirectURIs: 
                - {{ printf "https://unbind.%s/api-internal/auth/callback/dex" .Values.baseDomain }}
                - {{ printf "https://unbind.%s/api/auth/callback" .Values.baseDomain }}
              responseTypes: {{ .Values | get "overrides.dex.staticClients.unbindApi.responseTypes" (list "code") | toYaml | nindent 16 }}

        # Environment variables to pull secrets from Kubernetes secrets
        envVars:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values | get "overrides.dex.postgres.secretName" "dex.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values | get "overrides.dex.postgres.secretName" "dex.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                key: password
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: dex-client-secrets
                key: unbind-api-secret
          - name: CONNECTOR_SECRET
            valueFrom:
              secretKeyRef:
                name: dex-client-secrets
                key: connector-oidc-secret

        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000

        # Configure resources based on environment values
        resources:
          requests:
            memory: "10Mi" 
            cpu: "10m"  
          limits:
            cpu: {{ .Values | get "overrides.dex.resources.limits.cpu" "200m" }}
            memory: {{ .Values | get "overrides.dex.resources.limits.memory" "256Mi" }}

        # Ingress configuration
        ingress:
          enabled: {{ .Values | get "overrides.dex.ingress.enabled" true }}
          className: {{ .Values | get "overrides.dex.ingress.className" "nginx" }}
          annotations:
            cert-manager.io/cluster-issuer: {{ .Values | get "overrides.dex.ingress.certIssuer" "letsencrypt-prod" }}
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
          hosts:
            - host: {{ .Values | get "overrides.dex.host" (printf "dex.%s" .Values.baseDomain) }}
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: dex-tls
              hosts:
                - {{ .Values | get "overrides.dex.host" (printf "dex.%s" .Values.baseDomain) }}

        volumes:
          - name: tls-certs
            secret:
              secretName: dex-tls

        volumeMounts:
          - name: tls-certs
            mountPath: /etc/dex/tls
            readOnly: true

    labels:
      component: dex
      installed: {{ .Values | get "components.dex.enabled" true }}

  - name: kube-oidc-proxy
    namespace: {{ .Values.namespace }}
    chart: ./charts/kube-oidc-proxy
    needs:
      - dex
    values:
      - 
        replicaCount: {{ .Values | get "overrides.kubeOidcProxy.replicaCount" 2 }}
        image:
          repository: {{ .Values | get "overrides.kubeOidcProxy.image.repository" "unbindapp/kube-oidc-proxy" }}
          tag: {{ .Values | get "overrides.kubeOidcProxy.image.tag" "master-13812109543" }}
          pullPolicy: {{ .Values | get "overrides.kubeOidcProxy.image.pullPolicy" "IfNotPresent" }}
        
        oidc:
          issuerUrl: {{ .Values | get "overrides.kubeOidcProxy.oidc.issuerUrl" (printf "https://dex.%s" .Values.baseDomain) }}
          clientId: {{ .Values | get "overrides.kubeOidcProxy.oidc.clientId" "unbind-api" }}
          usernameClaim: {{ .Values | get "overrides.kubeOidcProxy.oidc.usernameClaim" "email" }}
          groupsClaim: {{ .Values | get "overrides.kubeOidcProxy.oidc.groupsClaim" "groups" }}
          tlsSecretName: {{ .Values | get "overrides.kubeOidcProxy.oidc.tlsSecretName" "dex-tls" }}
        
        service:
          type: {{ .Values | get "overrides.kubeOidcProxy.service.type" "ClusterIP" }}
          port: {{ .Values | get "overrides.kubeOidcProxy.service.port" 443 }}
          targetPort: {{ .Values | get "overrides.kubeOidcProxy.service.targetPort" 443 }}
        
        resources:
          requests:
            memory: "10Mi" 
            cpu: "10m"  
          limits:
            cpu: {{ .Values | get "overrides.kubeOidcProxy.resources.limits.cpu" "300m" }}
            memory: {{ .Values | get "overrides.kubeOidcProxy.resources.limits.memory" "256Mi" }}
        
        rbac:
          create: {{ .Values | get "overrides.kubeOidcProxy.rbac.create" true }}
          viewerCreate: {{ .Values | get "overrides.kubeOidcProxy.rbac.viewerCreate" true }}
          viewerGroupName: {{ .Values | get "overrides.kubeOidcProxy.rbac.viewerGroupName" "oidc:users" }}
    labels:
      component: auth
      installed: {{ .Values | get "components.kubeOidcProxy.enabled" true }}

    # * Unbind operator
  - name: unbind-operator
    namespace: {{ .Values.namespace }}
    chart: ./charts/unbind-operator
    values:
      -
        controllerManager:
          container:
            image:
              repository: {{ .Values | get "overrides.unbind.operator.repository" "unbindapp/unbind-operator" }}
              tag: {{ .Values | get "overrides.unbind.operator.tag" "latest" }}
    labels:
      component: unbind-operator
      installed: true

  # Unbind App section of helmfile.yaml
  - name: unbind-app
    namespace: '{{ .Values.namespace }}'
    chart: ./charts/unbind  # Local path to your chart
    needs:
      - valkey
      - database
      - buildkit
      - registry
    hooks:
      # Pre-install hook to generate secrets if they don't exist
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            # Check if auth secret exists, create if not
            if ! kubectl get secret -n {{ .Values.namespace }} unbind-authjs-secrets &> /dev/null; then
              # Generate random secrets
              AUTH_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
              
              # Create the secret
              kubectl create secret generic unbind-authjs-secrets \
                --namespace={{ .Values.namespace }} \
                --from-literal=auth-secret="${AUTH_SECRET}"
              
              echo "Created new auth secret for Next.js"
            else
              echo "Auth secret already exists"
            fi
            
            # Check if dex client secrets exist, create if not
            if ! kubectl get secret -n {{ .Values.namespace }} dex-client-secrets &> /dev/null; then
              # Generate random secrets
              CLIENT_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
              CONNECTOR_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
              
              # Create the secret
              kubectl create secret generic dex-client-secrets \
                --namespace={{ .Values.namespace }} \
                --from-literal=unbind-api-secret="${CLIENT_SECRET}" \
                --from-literal=connector-oidc-secret="${CONNECTOR_SECRET}"
              
              echo "Created new client and connector secrets for Dex"
            else
              echo "Dex client secrets already exist"
            fi
    values:
      # Global values
      - global:
          namespace: '{{ .Values.namespace }}'
          baseDomain: '{{ .Values.baseDomain }}'
      
      # Combined Ingress with proper configuration
      - combinedIngress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: "nginx"
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
            nginx.ingress.kubernetes.io/eventsource: "true"
            nginx.ingress.kubernetes.io/add-base-url: "true"
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/websocket-services: "unbind"
            nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
            nginx.ingress.kubernetes.io/proxy-read-timeout: "21600"
            nginx.ingress.kubernetes.io/proxy-body-size: "10m"
            nginx.ingress.kubernetes.io/upstream-hash-by: $realip_remote_addr
            nginx.ingress.kubernetes.io/affinity: "cookie"
            nginx.ingress.kubernetes.io/session-cookie-name: "unbind-session"
            nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
            nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
          host: {{ printf "unbind.%s" .Values.baseDomain }}
          tls:
            enabled: true
            secretName: "unbind-app-tls"
      
      # UI Configuration
      - ui:
          enabled: true
          name: unbind-ui
          image:
            repository: {{ .Values | get "overrides.unbind.ui.repository" "unbindapp/unbind-ui" }}
            tag: {{ .Values | get "overrides.unbind.ui.tag" "latest" }}
            pullPolicy: {{ .Values | get "overrides.unbind.ui.pullPolicy" "Always" }}
          replicaCount: {{ .Values | get "overrides.unbind.ui.replicaCount" 2 }}
          resources:
            requests:
              memory: "10Mi" 
              cpu: "10m"  
            limits:
              cpu: {{ .Values | get "overrides.unbind.ui.resources.limits.cpu" "500m" }}
              memory: {{ .Values | get "overrides.unbind.ui.resources.limits.memory" "1Gi" }}
          containerPort: 3000
          service:
            type: ClusterIP
            port: 3000
          ingress:
            enabled: false  # Using the combined ingress
          env:
            - name: AUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: unbind-authjs-secrets
                  key: auth-secret
            - name: AUTH_URL
              value: {{ printf "https://unbind.%s/api-internal/auth" .Values.baseDomain }}
            - name: DEX_CLIENT_ID
              value: {{ .Values | get "overrides.unbind.ui.dex.clientId" "unbind-api" }}
            - name: DEX_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.ui.dex.secretName" "dex-client-secrets" }}
                  key: {{ .Values | get "overrides.unbind.ui.dex.secretKey" "unbind-api-secret" }}
            - name: DEX_ISSUER
              value: {{ printf "https://dex.%s" .Values.baseDomain }}
            - name: NEXT_PUBLIC_UNBIND_API_URL
              value: {{ printf "https://unbind.%s/api" .Values.baseDomain }}
            - name: SITE_URL
              value: {{ printf "https://unbind.%s" .Values.baseDomain }}
          livenessProbe:
            enabled: true
            initialDelaySeconds: {{ .Values | get "overrides.unbind.ui.livenessProbe.initialDelaySeconds" 30 }}
            periodSeconds: {{ .Values | get "overrides.unbind.ui.livenessProbe.periodSeconds" 10 }}
          readinessProbe:
            enabled: true
            initialDelaySeconds: {{ .Values | get "overrides.unbind.ui.readinessProbe.initialDelaySeconds" 30 }}
            periodSeconds: {{ .Values | get "overrides.unbind.ui.readinessProbe.periodSeconds" 10 }}
      
      # API Configuration
      - api:
          enabled: true
          name: unbind-api
          image:
            repository: {{ .Values | get "overrides.unbind.api.repository" "unbindapp/unbind-api" }}
            tag: {{ .Values | get "overrides.unbind.api.tag" "latest" }}
            pullPolicy: {{ .Values | get "overrides.unbind.api.pullPolicy" "Always" }}
          replicaCount: {{ .Values | get "overrides.unbind.api.replicaCount" 2 }}
          resources:
            requests:
              memory: "10Mi" 
              cpu: "10m"  
            limits:
              cpu: {{ .Values | get "overrides.unbind.api.resources.limits.cpu" "500m" }}
              memory: {{ .Values | get "overrides.unbind.api.resources.limits.memory" "2Gi" }}
          containerPort: 8089
          service:
            type: ClusterIP
            port: 8089
          ingress:
            enabled: false  # Using the combined ingress
          command: ["/app/api"]
          env:
            - name: EXTERNAL_UI_URL
              value: {{ printf "https://unbind.%s" .Values.baseDomain }}
            - name: EXTERNAL_API_URL
              value: {{ printf "https://unbind.%s/api" .Values.baseDomain }}
            - name: EXTERNAL_WILDCARD_BASE_URL
              value: {{ printf "https://%s" .Values.baseDomain }}
            - name: POSTGRES_HOST
              value: {{ .Values | get "overrides.unbind.api.database.host" (printf "pg-unbind.%s" .Values.namespace) }}
            - name: POSTGRES_PORT
              value: {{ .Values | get "overrides.unbind.api.database.port" "5432" | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.api.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.api.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: password
            - name: POSTGRES_DB
              value: {{ .Values | get "overrides.unbind.api.database.name" "unbind" }}
            - name: VALKEY_URL
              value: {{ .Values | get "overrides.unbind.api.valkey.url" (printf "valkey-headless.%s:6379" .Values.namespace) }}
            - name: DEX_ISSUER_URL
              value: {{ .Values | get "overrides.unbind.api.dex.issuerUrl" (printf "https://dex.%s" .Values.baseDomain) }}
            - name: DEX_ISSUER_URL_EXTERNAL
              value: {{ .Values | get "overrides.unbind.api.dex.issuerUrlExternal" (printf "https://dex.%s" .Values.baseDomain) }}
            - name: DEX_CLIENT_ID
              value: {{ .Values | get "overrides.unbind.api.dex.clientId" "unbind-api" }}
            - name: DEX_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.api.dex.secretName" "dex-client-secrets" }}
                  key: {{ .Values | get "overrides.unbind.api.dex.secretKey" "unbind-api-secret" }}
            - name: KUBE_PROXY_URL
              value: {{ .Values | get "overrides.unbind.api.kubeProxyUrl" (printf "https://kube-oidc-proxy.%s.svc.cluster.local:443" .Values.namespace) }}
            - name: BUILD_IMAGER
              value: {{ .Values | get "overrides.unbind.api.buildImager" "unbindapp/unbind-builder:latest" }}
            - name: BUILDER_NAMESPACE
              value: {{ .Values.namespace }}
            - name: CONTAINER_REGISTRY_HOST
              value: {{ .Values | get "overrides.unbind.api.registry.host" (printf "docker-registry.%s:5000" .Values.namespace) }}
            - name: CONTAINER_REGISTRY_PASSWORD
              value: {{ .Values | get "overrides.unbind.api.registry.password" "TODO" }}
            - name: BUILDKIT_HOST
              value: {{ $hostValue := .Values | get "overrides.unbind.api.buildkit.host" "" }}
                    {{- if $hostValue }}
                    {{- $hostValue }}
                    {{- else }}
                    {{- printf "tcp://buildkitd.%s:1234" .Values.namespace }}
                    {{- end }}
            - name: LOKI_ENDPOINT
              value: {{ .Values | get "overrides.unbind.api.loki.endpoint" (printf "http://loki-unbind-gateway.%s.svc.cluster.local" .Values.namespace) }}
            - name: PROMETHEUS_ENDPOINT
              value: {{ .Values | get "overrides.unbind.api.prometheus.endpoint" (printf "http://kube-prometheus-stack-prometheus.%s:9090" .Values.namespace) }}
      
      # Auth Service Configuration
      - auth:
          enabled: true
          name: unbind-auth
          image:
            repository: {{ .Values | get "overrides.unbind.auth.repository" "unbindapp/unbind-api" }}
            tag: {{ .Values | get "overrides.unbind.auth.tag" "latest" }}
            pullPolicy: {{ .Values | get "overrides.unbind.auth.pullPolicy" "Always" }}
          replicaCount: {{ .Values | get "overrides.unbind.auth.replicaCount" 2 }}
          resources:
            requests:
              memory: "10Mi" 
              cpu: "10m"  
            limits:
              cpu: {{ .Values | get "overrides.unbind.auth.resources.limits.cpu" "500m" }}
              memory: {{ .Values | get "overrides.unbind.auth.resources.limits.memory" "2Gi" }}
          containerPort: 8090
          service:
            type: ClusterIP
            port: 8090
          ingress:
            enabled: false  # Using the combined ingress
          command: ["/app/oauth2server"]
          env:
            - name: EXTERNAL_OAUTH2_URL
              value: {{ printf "https://unbind.%s/oauth2/api" .Values.baseDomain }}
            - name: POSTGRES_HOST
              value: {{ .Values | get "overrides.unbind.auth.database.host" (printf "pg-unbind.%s" .Values.namespace) }}
            - name: POSTGRES_PORT
              value: {{ .Values | get "overrides.unbind.auth.database.port" "5432" | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.api.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.auth.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: password
            - name: DEX_ISSUER_URL
              value: {{ .Values | get "overrides.unbind.auth.dex.issuerUrl" (printf "https://dex.%s" .Values.baseDomain) }}
            - name: DEX_ISSUER_URL_EXTERNAL
              value: {{ .Values | get "overrides.unbind.auth.dex.issuerUrlExternal" (printf "https://dex.%s" .Values.baseDomain) }}
            - name: DEX_CLIENT_ID
              value: {{ .Values | get "overrides.unbind.auth.dex.clientId" "unbind-api" }}
            - name: DEX_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.auth.dex.secretName" "dex-client-secrets" }}
                  key: {{ .Values | get "overrides.unbind.auth.dex.secretKey" "unbind-api-secret" }}
            - name: DEX_CONNECTOR_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.auth.dex.secretName" "dex-client-secrets" }}
                  key: connector-oidc-secret
            - name: VALKEY_URL
              value: {{ .Values | get "overrides.unbind.auth.valkey.url" (printf "valkey-headless.%s:6379" .Values.namespace) }}
      
      # Service Account and RBAC
      - serviceAccount:
          create: true
          name: unbind-api-sa
          annotations: {}
      - rbac:
          create: true
      - builder:
          rbac:
            create: true
            clusterRoleName: "app-crd-creator"
            clusterRoleBindingName: "app-crd-creator-binding"
          serviceAccount:
            create: true
            name: "builder-serviceaccount"
            annotations: {}

    labels:
      component: unbind-app
      installed: true