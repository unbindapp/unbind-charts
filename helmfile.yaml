# helmfile.yaml
# Main Helmfile configuration
# Repositories
repositories:
  - name: longhorn
    url: https://charts.longhorn.io
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
  - name: postgres-operator
    url: https://opensource.zalando.com/postgres-operator/charts/postgres-operator
  - name: grafana
    url: https://grafana.github.io/helm-charts 
  - name: dex
    url: https://charts.dexidp.io
  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx
  - name: jetstack
    url: https://charts.jetstack.io

# Environment values are loaded from environment-specific files
environments:
  default:
    values:
      - environments/default.yaml
# Configure "requires" for dependencies between releases
helmDefaults:
  wait: true
  timeout: 600
  atomic: true
  createNamespace: true
---
# Releases
releases:
  # Managed Helm Charts with version locks
  - name: longhorn
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: longhorn/longhorn
    version: 1.8.1 # Lock to specific version for compatibility
    values:
      - values/longhorn.yaml
      # This is where we add dynamic values that get merged into the chart
      - persistence:
          defaultClass: {{ .Environment.Values | get "overrides.longhorn.persistence.defaultClass" true }}
          defaultClassReplicaCount: {{ .Environment.Values | get "overrides.longhorn.persistence.defaultClassReplicaCount" }}
          reclaimPolicy: {{ .Environment.Values | get "overrides.longhorn.persistence.reclaimPolicy" }}
        defaultSettings:
          defaultReplicaCount: {{ .Environment.Values | get "overrides.longhorn.defaultSettings.defaultReplicaCount" }}
    labels:
      component: storage
      installed: {{ .Environment.Values | get "components.longhorn.enabled" true }}

  - name: kube-prometheus-stack
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: prometheus-community/kube-prometheus-stack
    version: 70.4.0 
    values:
      - values/kube-prometheus-stack.yaml
      - prometheus:
          prometheusSpec:
            retention: {{ .Environment.Values | get "overrides.kubePrometheusStack.retention" }}
            storageSpec:
              volumeClaimTemplate:
                spec:
                  resources:
                    requests:
                      storage: {{ .Environment.Values | get "overrides.kubePrometheusStack.storage" }}
    labels:
      component: monitoring
      installed: {{ .Environment.Values | get "components.kubePrometheusStack.enabled" true }}

  - name: alloy
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: grafana/alloy
    version: 0.12.6
    values:
      - 
        alloy:
          mounts:
            varlog: true
          configMap:
            content: |
              logging {
                level  = "info"
                format = "logfmt"
              }
              discovery.kubernetes "pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-team,unbind-project,unbind-environment,unbind-service"
                }
              }
              discovery.kubernetes "deployment_pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-deployment"
                }
              }
              discovery.relabel "pods" {
                targets = discovery.kubernetes.pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_team"]
                  target_label  = "unbind_team"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_project"]
                  target_label  = "unbind_project"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_environment"]
                  target_label  = "unbind_environment"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_service"]
                  target_label  = "unbind_service"
                }
              }
              discovery.relabel "deployment_pods" {
                targets = discovery.kubernetes.deployment_pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_deployment"]
                  target_label  = "unbind_deployment"
                }
              }
              loki.source.kubernetes "pods" {
                targets = discovery.relabel.pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.source.kubernetes "deployment_pods" {
                targets = discovery.relabel.deployment_pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.write "endpoint" {
                endpoint {
                  url = "http://{{ .Environment.Values | get "overrides.alloy.loki.endpoint.host" }}.{{ .Environment.Values | get "overrides.alloy.loki.namespace" .Environment.Values.global.namespace }}.svc.cluster.local:{{ .Environment.Values | get "overrides.alloy.loki.endpoint.port" "80" }}/loki/api/v1/push"
                  tenant_id = "local"
                }
              }

    labels:
      component: alloy
      installed: {{ .Environment.Values | get "components.alloy.enabled" true }}

  - name: loki
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: grafana/loki
    version: 6.29.0
    values:
      - 
        loki:
          auth_enabled: false
          commonConfig:
            replication_factor: 1
          schemaConfig:
            configs:
              - from: "2024-04-01"
                store: tsdb
                object_store: s3
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h    
          pattern_ingester:
            enabled: true
          limits_config:
            max_concurrent_tail_requests: 100
            allow_structured_metadata: true
            volume_enabled: true
            retention_period: {{ .Environment.Values | get "overrides.loki.retentionPeriod" }} 
          ruler:
            enable_api: true
          tableManager:
            retention_deletes_enabled: true
            retention_period: {{ .Environment.Values | get "overrides.loki.retentionPeriod" }}

        minio:
          enabled: true
          persistence:
            enabled: true
            size: {{ .Environment.Values | get "overrides.loki.minioStorageSize" }}

        deploymentMode: SingleBinary
        singleBinary:
          replicas: 1
          persistence:
            enabled: true
            size: {{ .Environment.Values | get "overrides.loki.storageSize" }}

        # Zero out replica counts of other deployment modes
        backend:
          replicas: 0
        read:
          replicas: 0
        write:
          replicas: 0
        ingester:
          replicas: 0
        querier:
          replicas: 0
        queryFrontend:
          replicas: 0
        queryScheduler:
          replicas: 0
        distributor:
          replicas: 0
        compactor:
          replicas: 0
        indexGateway:
          replicas: 0
        bloomCompactor:
          replicas: 0
        bloomGateway:
          replicas: 0


    labels:
      component: loki
      installed: {{ .Environment.Values | get "components.loki.enabled" true }}

  - name: buildkit
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/buildkitd
    values:
      - 
        resources: {}
        replicaCount: {{ .Environment.Values | get "overrides.buildkitd.replicas" }}
        image:
          repository: {{ .Environment.Values | get "overrides.buildkitd.image" }}
        registries:
          - url: {{ .Environment.Values | get "overrides.buildkitd.registry" (printf "docker-registry.%s:5000" (.Environment.Values | get "global.namespace")) }}
            http: true
            insecure: true

    labels:
      component: build
      installed: {{ .Environment.Values | get "components.buildkitd.enabled" true }}

  - name: postgres-operator
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: postgres-operator/postgres-operator
    version: 1.14.0
    values:
      - 
        configGeneral:
          docker_image: {{ .Environment.Values | get "overrides.postgresOperator.spiloImage" }}
        configKubernetes:
          inherited_labels:
            - unbind-team
            - unbing-project
            - unbind-environment
            - unbind-service
            - unbind-is-system-db
            # Helm labels
            - app.kubernetes.io/managed-by
            - app.kubernetes.io/name
            - app.kubernetes.io/instance
            - app.kubernetes.io/version
            - helm.sh/chart
            # Unbind custom definition labels
            - unbind/usd-name
            - unbind/usd-version
            - unbind/usd-category

    labels:
      component: postgres-operator
      installed: {{ .Environment.Values | get "components.postgresOperator.enabled" true }}
  
  - name: database
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/database
    needs:
      - postgres-operator
    values:
      - 
        replicaCount: {{ .Environment.Values | get "overrides.database.replicaCount" }}
        storage: {{ .Environment.Values | get "overrides.database.storage" }}
        resources:
          requests:
            cpu: {{ .Environment.Values | get "overrides.database.resources.requests.cpu"  }}
            memory: {{ .Environment.Values | get "overrides.database.resources.requests.memory" }}
          limits:
            cpu: {{ .Environment.Values | get "overrides.database.resources.limits.cpu" }}
            memory: {{ .Environment.Values | get "overrides.database.resources.limits.memory" }}
    labels:
      component: database
      installed: {{ .Environment.Values | get "components.database.enabled" true }}

  - name: registry
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/registry
    values:
      - 
        replicaCount: {{ .Environment.Values | get "overrides.registry.replicaCount" }}
        persistence:
          size: {{ .Environment.Values | get "overrides.registry.persistence.size" }}
        service:
          nodePort: {{ .Environment.Values | get "overrides.registry.service.nodePort" }}
        cleanup:
          threshold: {{ .Environment.Values | get "overrides.registry.cleanup.threshold" }} # This should be around 80% of the total size, this is for the auto cleanup job

    labels:
      component: registry
      installed: {{ .Environment.Values | get "components.registry.enabled" true }}

  # Added ingress-nginx as a daemonset
  - name: ingress-nginx
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ingress-nginx/ingress-nginx
    version: 4.12.1
    values:
      - 
        controller:
          kind: DaemonSet
          image:
            registry: registry.k8s.io
            image: ingress-nginx/controller
            tag: "v1.12.1"
            digest: sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          ingressClassResource:
            name: nginx
            default: true
          admissionWebhooks:
            enabled: true
          service:
            enabled: true
            type: LoadBalancer
            externalTrafficPolicy: Local
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          config:
            use-forwarded-headers: "true"
            compute-full-forwarded-for: "true"
            use-proxy-protocol: "false"
        rbac:
          create: true
          scope: false
        serviceAccount:
          create: true
    labels:
      component: ingress
      installed: {{ .Environment.Values | get "components.ingressNginx.enabled" true }}

  # Added cert-manager for SSL certificates
  - name: cert-manager
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: jetstack/cert-manager
    version: 1.17.1
    values:
      - 
        installCRDs: true
        replicaCount: {{ .Environment.Values | get "overrides.certManager.replicaCount" 1 }}
        ingressShim:
          defaultIssuerName: letsencrypt-prod
          defaultIssuerKind: ClusterIssuer
          defaultIssuerGroup: cert-manager.io
    labels:
      component: cert-manager
      installed: {{ .Environment.Values | get "components.certManager.enabled" true }}
    
    # Hook to create ClusterIssuer after cert-manager installation
    hooks:
      - events: ["postsync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            cat <<EOF | kubectl apply -f -
            apiVersion: cert-manager.io/v1
            kind: ClusterIssuer
            metadata:
              name: letsencrypt-prod
            spec:
              acme:
                server: https://acme-v02.api.letsencrypt.org/directory
                email: "admin@{{ .Environment.Values.global.baseDomain }}"
                privateKeySecretRef:
                  name: letsencrypt-prod
                solvers:
                - http01:
                    ingress:
                      class: nginx
            EOF

  - name: dex
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: dex/dex
    version: 0.23.0 
    needs:
      - postgres-operator
      - database
    hooks:
      # Pre-install hook to generate secrets if they don't exist
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            # Check if secret exists, create if not
            if ! kubectl get secret -n {{ .Environment.Values | get "global.namespace" }} dex-client-secrets &> /dev/null; then
              # Generate random secret
              CLIENT_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
              
              # Create the secret
              kubectl create secret generic dex-client-secrets \
                --namespace={{ .Environment.Values | get "global.namespace" }} \
                --from-literal=unbind-api-secret="${CLIENT_SECRET}"
              
              echo "Created new client secret for Dex"
            else
              echo "Dex client secrets already exist, using existing values"
            fi
    values:
      - 
        # Image configuration with dynamic version
        image:
          repository: ghcr.io/dexidp/dex
          tag: "{{ .Environment.Values | get "overrides.dex.version" "v2.42.0" }}"
          pullPolicy: IfNotPresent

        # Dynamically set replica count
        replicaCount: {{ .Environment.Values | get "overrides.dex.replicaCount" 2 }}

        # Enable HTTPS endpoint
        https:
          enabled: true

        # Use external secrets for the configuration
        configSecret:
          create: true

        # Dex configuration
        config:
          issuer: {{ .Environment.Values | get "overrides.dex.issuer" (printf "https://dex.%s" .Environment.Values.global.baseDomain) }}
          storage:
            type: postgres
            config:
              host: {{ .Environment.Values | get "overrides.dex.postgres.host" (printf "pg-unbind.%s" .Environment.Values.global.namespace) }}
              port: {{ .Environment.Values | get "overrides.dex.postgres.port" 5432 }}
              database: {{ .Environment.Values | get "overrides.dex.postgres.database" "dex" }}
              user: {{ .Environment.Values | get "overrides.dex.postgres.user" "dex_user" }}
              passwordEnv: POSTGRES_PASSWORD
              ssl:
                mode: {{ .Environment.Values | get "overrides.dex.postgres.ssl.mode" "disable" }}
          web:
            https: 0.0.0.0:5556
            tlsCert: /etc/dex/tls/tls.crt
            tlsKey: /etc/dex/tls/tls.key
          issuers: {{ .Environment.Values | get "overrides.dex.issuers" (list (printf "https://dex.%s" .Environment.Values.global.baseDomain) (printf "https://dex.%s.svc.cluster.local:5556" .Environment.Values.global.namespace)) | toYaml | nindent 12 }}
          oauth2:
            skipApprovalScreen: {{ .Environment.Values | get "overrides.dex.oauth2.skipApprovalScreen" true }}
            responseTypes: {{ .Environment.Values | get "overrides.dex.oauth2.responseTypes" (list "code") | toYaml | nindent 14 }}
            alwaysIssueOfflineToken: {{ .Environment.Values | get "overrides.dex.oauth2.alwaysIssueOfflineToken" true }}
          expiry:
            idTokens: {{ .Environment.Values | get "overrides.dex.expiry.idTokens" "1h" }}
            accessTokens: {{ .Environment.Values | get "overrides.dex.expiry.accessTokens" "1h" }}
            refreshTokens:
              validIfNotUsedFor: {{ .Environment.Values | get "overrides.dex.expiry.refreshTokens.validIfNotUsedFor" "336h" }}
              disableRotation: {{ .Environment.Values | get "overrides.dex.expiry.refreshTokens.disableRotation" true }}
          connectors: {{ .Environment.Values | get "overrides.dex.connectors" (list (dict "type" "oidc" "id" "unbind-oidc" "name" "Unbind Built-in OIDC Provider" "config" (dict "issuer" (printf "https://auth.%s" .Environment.Values.global.baseDomain) "clientID" "dex-client" "clientSecret" "dex-secret" "redirectURI" (printf "https://dex.%s/callback" .Environment.Values.global.baseDomain) "scopes" (list "openid" "profile" "email" "offline_access" "groups") "insecureEnableGroups" true "discoveryURL" (printf "https://auth.%s/.well-known/openid-configuration" .Environment.Values.global.baseDomain) "userIDKey" "jti" "claimMapping" (dict "email" "email" "name" "name" "groups" "groups")))) | toYaml | nindent 12 }}
          staticClients:
            - id: unbind-api
              secretEnv: CLIENT_SECRET
              name: Unbind API
              redirectURIs: 
                - {{ printf "https://unbind.%s/api/auth/callback/dex" .Environment.Values.global.baseDomain }}
                - {{ printf "https://unbind-api.%s/auth/callback" .Environment.Values.global.baseDomain }}
                - http://localhost:3000/api/auth/callback/dex
              responseTypes: {{ .Environment.Values | get "overrides.dex.staticClients.unbindApi.responseTypes" (list "code") | toYaml | nindent 16 }}

        # Environment variables to pull secrets from Kubernetes secrets
        envVars:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Environment.Values | get "overrides.dex.postgres.secretName" "dex.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                key: password
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: dex-client-secrets
                key: unbind-api-secret

        # Volume configuration for TLS certificates
        volumes:
          - name: tls
            secret:
              secretName: {{ .Environment.Values | get "overrides.dex.tls.secretName" "dex-tls" }}
              defaultMode: 420

        volumeMounts:
          - name: tls
            mountPath: /etc/dex/tls
            readOnly: true

        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000

        # Configure resources based on environment values
        resources:
          requests:
            cpu: {{ .Environment.Values | get "overrides.dex.resources.requests.cpu" "100m" }}
            memory: {{ .Environment.Values | get "overrides.dex.resources.requests.memory" "128Mi" }}
          limits:
            cpu: {{ .Environment.Values | get "overrides.dex.resources.limits.cpu" "200m" }}
            memory: {{ .Environment.Values | get "overrides.dex.resources.limits.memory" "256Mi" }}

        # Ingress configuration
        ingress:
          enabled: {{ .Environment.Values | get "overrides.dex.ingress.enabled" true }}
          className: {{ .Environment.Values | get "overrides.dex.ingress.className" "nginx" }}
          annotations:
            cert-manager.io/cluster-issuer: {{ .Environment.Values | get "overrides.dex.ingress.certIssuer" "letsencrypt-prod" }}
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
          hosts:
            - host: {{ .Environment.Values | get "overrides.dex.host" (printf "dex.%s" .Environment.Values.global.baseDomain) }}
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: {{ .Environment.Values | get "overrides.dex.tls.secretName" "dex-tls" }}
              hosts:
                - {{ .Environment.Values | get "overrides.dex.host" (printf "dex.%s" .Environment.Values.global.baseDomain) }}

    labels:
      component: dex
      installed: {{ .Environment.Values | get "components.dex.enabled" true }}

  - name: kube-oidc-proxy
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/kube-oidc-proxy
    needs:
      - dex
    values:
      - 
        replicaCount: {{ .Environment.Values | get "overrides.kubeOidcProxy.replicaCount" 2 }}
        image:
          repository: {{ .Environment.Values | get "overrides.kubeOidcProxy.image.repository" "unbindapp/kube-oidc-proxy" }}
          tag: {{ .Environment.Values | get "overrides.kubeOidcProxy.image.tag" "master-13812109543" }}
          pullPolicy: {{ .Environment.Values | get "overrides.kubeOidcProxy.image.pullPolicy" "IfNotPresent" }}
        
        oidc:
          issuerUrl: {{ .Environment.Values | get "overrides.kubeOidcProxy.oidc.issuerUrl" (printf "https://dex.%s" .Environment.Values.global.baseDomain) }}
          clientId: {{ .Environment.Values | get "overrides.kubeOidcProxy.oidc.clientId" "unbind-api" }}
          usernameClaim: {{ .Environment.Values | get "overrides.kubeOidcProxy.oidc.usernameClaim" "email" }}
          groupsClaim: {{ .Environment.Values | get "overrides.kubeOidcProxy.oidc.groupsClaim" "groups" }}
          tlsSecretName: {{ .Environment.Values | get "overrides.kubeOidcProxy.oidc.tlsSecretName" "dex-tls" }}
        
        service:
          type: {{ .Environment.Values | get "overrides.kubeOidcProxy.service.type" "ClusterIP" }}
          port: {{ .Environment.Values | get "overrides.kubeOidcProxy.service.port" 443 }}
          targetPort: {{ .Environment.Values | get "overrides.kubeOidcProxy.service.targetPort" 443 }}
        
        resources:
          requests:
            cpu: {{ .Environment.Values | get "overrides.kubeOidcProxy.resources.requests.cpu" "100m" }}
            memory: {{ .Environment.Values | get "overrides.kubeOidcProxy.resources.requests.memory" "128Mi" }}
          limits:
            cpu: {{ .Environment.Values | get "overrides.kubeOidcProxy.resources.limits.cpu" "300m" }}
            memory: {{ .Environment.Values | get "overrides.kubeOidcProxy.resources.limits.memory" "256Mi" }}
        
        rbac:
          create: {{ .Environment.Values | get "overrides.kubeOidcProxy.rbac.create" true }}
          viewerCreate: {{ .Environment.Values | get "overrides.kubeOidcProxy.rbac.viewerCreate" true }}
          viewerGroupName: {{ .Environment.Values | get "overrides.kubeOidcProxy.rbac.viewerGroupName" "oidc:users" }}
    labels:
      component: auth
      installed: {{ .Environment.Values | get "components.kubeOidcProxy.enabled" true }}

    # * Unbind operator
  - name: unbind-operator
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/unbind-operator
    values:
      -
        controllerManager:
          container:
            image:
              repository: {{ .Environment.Values | get "overrides.unbind.operator.repository" "unbindapp/unbind-operator" }}
              tag: {{ .Environment.Values | get "overrides.unbind.operator.tag" "latest" }}
    labels:
      component: unbind-operator
      installed: true
