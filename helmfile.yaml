# helmfile.yaml
# Main Helmfile configuration
# Repositories
repositories:
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
  - name: postgres-operator
    url: https://opensource.zalando.com/postgres-operator/charts/postgres-operator
  - name: grafana
    url: https://grafana.github.io/helm-charts
  - name: dex
    url: https://charts.dexidp.io
  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx
  - name: jetstack
    url: https://charts.jetstack.io
  - name: bitnami
    url: https://charts.bitnami.com/bitnami
  - name: fluxcd-community
    url: https://fluxcd-community.github.io/helm-charts

values:
 - baseDomain: example.com
 - namespace: unbind-system
 - tlsSecretName: unbind-domain-tls 

# Environment values are loaded from environment-specific files
environments:
  default:
    values:
      - environments/default.yaml
# Configure "requires" for dependencies between releases
helmDefaults:
  wait: true
  timeout: 600
  atomic: true
  createNamespace: true
---
# Releases
releases:
  # Add Flux CD controllers
  - name: flux
    namespace: {{ .Values.namespace }}
    chart: fluxcd-community/flux2
    version: 2.15.0
    values:
      -
        policies:
          create: false
        # Enable only the components we need
        helmController:
          create: true
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
        sourceController:
          create: true
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
        # Disable other controllers we don't need
        kustomizeController:
          create: false
        notificationController:
          create: false
        imageReflectionController:
          create: false
        imageAutomationController:
          create: false
    labels:
      component: flux
      installed: true

  - name: kube-prometheus-stack
    namespace: {{ .Values.namespace }}
    chart: prometheus-community/kube-prometheus-stack
    version: 70.4.0
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            echo "Installing Prometheus Operator CRDs..."
            for CRD in alertmanagerconfigs alertmanagers podmonitors probes prometheuses prometheusrules servicemonitors thanosrulers; do
              kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.60.0/example/prometheus-operator-crd/monitoring.coreos.com_${CRD}.yaml
            done
            echo "Prometheus Operator CRDs installed"
    values:
      - values/kube-prometheus-stack.yaml
      - prometheus:
          prometheusSpec:
            retention: {{ .Values | get "overrides.kubePrometheusStack.retention" }}
            storageSpec:
              volumeClaimTemplate:
                spec:
                  resources:
                    requests:
                      storage: {{ .Values | get "overrides.kubePrometheusStack.storage" }}
    labels:
      component: monitoring
      installed: {{ .Values | get "components.kubePrometheusStack.enabled" true }}

  - name: alloy
    namespace: {{ .Values.namespace }}
    chart: grafana/alloy
    version: 0.12.6
    values:
      -
        alloy:
          mounts:
            varlog: true
          configMap:
            content: |
              logging {
                level  = "info"
                format = "logfmt"
              }
              discovery.kubernetes "pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-team,unbind-project,unbind-environment,unbind-service,unbind-deployment"
                }
              }
              discovery.kubernetes "deployment_pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-deployment-build"
                }
              }
              discovery.relabel "pods" {
                targets = discovery.kubernetes.pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_team"]
                  target_label  = "unbind_team"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_project"]
                  target_label  = "unbind_project"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_environment"]
                  target_label  = "unbind_environment"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_service"]
                  target_label  = "unbind_service"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_deployment"]
                  target_label  = "unbind_deployment"
                }
              }
              discovery.relabel "deployment_pods" {
                targets = discovery.kubernetes.deployment_pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_deployment_build"]
                  target_label  = "unbind_deployment_build"
                }
              }
              loki.source.kubernetes "pods" {
                targets = discovery.relabel.pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.source.kubernetes "deployment_pods" {
                targets = discovery.relabel.deployment_pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.write "endpoint" {
                endpoint {
                  url = "http://{{ .Values | get "overrides.alloy.loki.endpoint.host" "loki-gateway" }}.{{ .Values | get "overrides.alloy.loki.namespace" .Values.namespace }}.svc.cluster.local:{{ .Values | get "overrides.alloy.loki.endpoint.port" "80" }}/loki/api/v1/push"
                  tenant_id = "local"
                }
              }

    labels:
      component: alloy
      installed: {{ .Values | get "components.alloy.enabled" true }}

  - name: loki
    namespace: {{ .Values.namespace }}
    chart: grafana/loki
    version: 6.29.0
    values:
      -
        loki:
          auth_enabled: false
          commonConfig:
            replication_factor: 1
          schemaConfig:
            configs:
              - from: "2024-04-01"
                store: tsdb
                object_store: s3
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h
          pattern_ingester:
            enabled: true
          limits_config:
            max_concurrent_tail_requests: 100
            allow_structured_metadata: true
            volume_enabled: true
            retention_period: {{ .Values | get "overrides.loki.retentionPeriod" }}
          ruler:
            enable_api: true
          tableManager:
            retention_deletes_enabled: true
            retention_period: {{ .Values | get "overrides.loki.retentionPeriod" }}

        resultsCache:
          enabled: false

        chunksCache:
          enabled: false

        lokiCanary:
          enabled: false

        test:
          enabled: false

        minio:
          enabled: true
          persistence:
            enabled: true
            size: {{ .Values | get "overrides.loki.minioStorageSize" }}
          resources:
            requests:
              cpu: 10m
              memory: 10Mi

        deploymentMode: SingleBinary
        singleBinary:
          replicas: 1
          persistence:
            enabled: false
          extraVolumes:
            - name: loki-data
              emptyDir: {}
          extraVolumeMounts:
            - name: loki-data
              mountPath: /var/loki

        # Zero out replica counts of other deployment modes
        backend:
          replicas: 0
        read:
          replicas: 0
        write:
          replicas: 0
        ingester:
          replicas: 0
        querier:
          replicas: 0
        queryFrontend:
          replicas: 0
        queryScheduler:
          replicas: 0
        distributor:
          replicas: 0
        compactor:
          replicas: 0
        indexGateway:
          replicas: 0
        bloomCompactor:
          replicas: 0
        bloomGateway:
          replicas: 0

    labels:
      component: loki
      installed: {{ .Values | get "components.loki.enabled" true }}

  - name: buildkit
    namespace: {{ .Values.namespace }}
    chart: ./charts/buildkitd
    values:
      -
        resources: {}
        replicaCount: {{ .Values | get "overrides.buildkitd.replicas" }}
        image: {{ .Values | get "overrides.buildkitd.image" }}
        # buildkit connects internally to the registry service, no ingress path needed here
        registries:
          - url: {{ .Values | get "overrides.buildkitd.registryInternal" (printf "docker-registry.%s:5000" (.Values.namespace)) }}
            http: true
            insecure: true

    labels:
      component: build
      installed: {{ .Values | get "components.buildkitd.enabled" true }}

  - name: postgres-operator
    namespace: {{ .Values.namespace }}
    chart: postgres-operator/postgres-operator
    version: 1.14.0
    needs:
      - cert-manager
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            echo "Installing Postgres Operator CRDs..."
            kubectl apply -f https://raw.githubusercontent.com/zalando/postgres-operator/refs/tags/v1.14.0/manifests/operatorconfiguration.crd.yaml
            kubectl apply -f https://raw.githubusercontent.com/zalando/postgres-operator/refs/tags/v1.14.0/manifests/postgresql.crd.yaml
            echo "Postgres Operator CRDs installed"
    values:
      -
        configGeneral:
          docker_image: {{ .Values | get "overrides.postgresOperator.spiloImage" }}
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 10m
            memory: 50Mi
        configKubernetes:
          inherited_labels:
            - unbind-team
            - unbing-project
            - unbind-environment
            - unbind-service
            - unbind-deployment
            - unbind-is-system-db
            # Helm labels
            - app.kubernetes.io/managed-by
            - app.kubernetes.io/name
            - app.kubernetes.io/instance
            - app.kubernetes.io/version
            - helm.sh/chart
            # Unbind custom definition labels
            - unbind/usd-name
            - unbind/usd-version
            - unbind/usd-category

    labels:
      component: postgres-operator
      installed: {{ .Values | get "components.postgresOperator.enabled" true }}

  - name: database
    namespace: {{ .Values.namespace }}
    chart: ./charts/database
    needs:
      - postgres-operator
    values:
      -
        replicaCount: {{ .Values | get "overrides.database.replicaCount" }}
        storage: {{ .Values | get "overrides.database.storage" }}
        resources:
          requests:
            memory: "10Mi"
            cpu: "10m"
          limits:
            cpu: {{ .Values | get "overrides.database.resources.limits.cpu" }}
            memory: {{ .Values | get "overrides.database.resources.limits.memory" }}
    labels:
      component: database
      installed: {{ .Values | get "components.database.enabled" true }}

  - name: valkey
    namespace: {{ .Values.namespace }}
    chart: bitnami/valkey
    version: 3.0.1
    values:
      - architecture: standalone
        auth:
          enabled: false
        commonConfiguration: |-
          appendonly yes
          protected-mode no
        persistence:
          enabled: true
          size: 1Gi
        primary:
          replicaCount: 1
          resources:
            requests:
              memory: "10Mi"
              cpu: "10m"
            limits:
              memory: 192Mi
              cpu: 200m
        replica:
          replicaCount: 0
    labels:
      component: valkey
      installed: {{ .Values | get "components.valkey.enabled" true }}

  - name: registry
    namespace: {{ .Values.namespace }}
    chart: ./charts/registry
    hooks:
      # ... (presync hook for secret creation remains the same) ...
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            # Exit on error, treat unset variables as errors, propagate pipeline errors
            set -eu
            NAMESPACE="{{ .Values.namespace }}" # Namespace needed by the script
            GREEN='\033[0;32m'
            NC='\033[0m'
            YELLOW='\033[0;33m'
            RED='\033[0;31m'

            # Function to retry a command with exponential backoff
            retry_command() {
              local max_attempts=30  # About 5 minutes with our sleep pattern
              local attempt=1
              local timeout=3
              local command="$@"

              while true; do
                echo -e "${YELLOW}Attempt $attempt/$max_attempts: Running command...${NC}"
                if eval "$command"; then
                  return 0
                fi

                attempt=$((attempt + 1))
                if [ $attempt -gt $max_attempts ]; then
                  echo -e "${RED}Command failed after $max_attempts attempts${NC}"
                  return 1
                fi

                echo -e "${YELLOW}Command failed. Retrying in $timeout seconds...${NC}"
                sleep $timeout

                # Increase timeout slightly for exponential backoff
                timeout=$((timeout + 2))
              done
            }

            echo "Checking for namespace '$NAMESPACE'..."
            if ! kubectl get namespace "$NAMESPACE" &>/dev/null; then
              echo -e "${YELLOW}Namespace '$NAMESPACE' not found. Waiting for it to be created (up to 5 minutes)...${NC}"
              if ! retry_command "kubectl get namespace \"$NAMESPACE\" &>/dev/null"; then
                echo -e "${RED}Namespace '$NAMESPACE' was never created. Exiting.${NC}"
                exit 1
              fi
            fi
            echo -e "${GREEN}✓ Namespace '$NAMESPACE' exists${NC}"

            echo "Checking for existing secret 'registry-basic-auth' in namespace '$NAMESPACE'..."
            if ! kubectl get secret registry-basic-auth -n "$NAMESPACE" &> /dev/null; then
              echo "Creating basic auth secret for Docker Registry..."
              TMPFILE=$(mktemp)
              # Ensure TMPFILE is removed on script exit
              trap 'rm -f -- "$TMPFILE"' EXIT

              USERNAME={{ .Values | get "overrides.registry.auth.username" "admin" }}
              PASSWORD=$(openssl rand -base64 48 | tr -d '\n')

              htpasswd -Bbn "$USERNAME" "$PASSWORD" > "$TMPFILE"

              # Create the secrets with retry
              echo "Creating registry-basic-auth secret..."
              if ! retry_command "kubectl create secret generic registry-basic-auth --namespace=\"$NAMESPACE\" --from-file=auth=\"$TMPFILE\""; then
                echo -e "${RED}Failed to create registry-basic-auth secret after multiple attempts${NC}"
                exit 1
              fi

              echo "Creating registry-credentials secret..."
              if ! retry_command "kubectl create secret generic registry-credentials --namespace=\"$NAMESPACE\" --from-literal=username=\"${USERNAME}\" --from-literal=password=\"${PASSWORD}\""; then
                echo -e "${RED}Failed to create registry-credentials secret after multiple attempts${NC}"
                exit 1
              fi

              echo -e "${GREEN}✓ Registry secrets created.${NC}"
            else
              echo "Secret registry-basic-auth already exists in namespace $NAMESPACE."
            fi
    values:
      -
        ingress:
          enabled: true
          host: {{ .Values | get "overrides.registry.ingress.host" (printf "unbind.%s" .Values.baseDomain) }}
          authSecret: registry-basic-auth
          tls:
            secretName: {{ .Values.tlsSecretName }}
        replicaCount: {{ .Values | get "overrides.registry.replicaCount" }}
        persistence:
          size: {{ .Values | get "overrides.registry.persistence.size" }}
        cleanup:
          threshold: {{ .Values | get "overrides.registry.cleanup.threshold" }}

    labels:
      component: registry
      installed: {{ .Values | get "components.registry.enabled" true }}

  # Added ingress-nginx as a daemonset
  - name: ingress-nginx
    namespace: {{ .Values.namespace }}
    chart: ingress-nginx/ingress-nginx
    version: 4.12.1
    values:
      -
        controller:
          kind: DaemonSet
          image:
            registry: registry.k8s.io
            image: ingress-nginx/controller
            tag: "v1.12.1"
            digest: sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          ingressClassResource:
            name: nginx
            default: true
          admissionWebhooks:
            enabled: true
          service:
            enabled: true
            type: LoadBalancer
            externalTrafficPolicy: Local
          config:
            use-forwarded-headers: "true"
            compute-full-forwarded-for: "true"
            use-proxy-protocol: "false"
            allow-snippet-annotations: "true"
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
        rbac:
          create: true
          scope: false
        serviceAccount:
          create: true
    labels:
      component: ingress
      installed: {{ .Values | get "components.ingressNginx.enabled" true }}

  # Added cert-manager for SSL certificates
  - name: cert-manager
    namespace: {{ .Values.namespace }}
    chart: jetstack/cert-manager
    version: 1.17.1
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            echo "Installing cert-manager CRDs..."
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.17.1/cert-manager.crds.yaml
            echo "Cert-manager CRDs installed"
      - events: ["postsync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            cat <<EOF | kubectl apply -f -
            apiVersion: cert-manager.io/v1
            kind: ClusterIssuer
            metadata:
              name: letsencrypt-prod
            spec:
              acme:
                server: https://acme-v02.api.letsencrypt.org/directory
                email: "admin@{{ .Values.baseDomain }}"
                privateKeySecretRef:
                  name: letsencrypt-prod
                solvers:
                - http01:
                    ingress:
                      class: nginx # Ensure this matches your Ingress controller class
            EOF
    values:
      -
        crds:
          enabled: false
        replicaCount: {{ .Values | get "overrides.certManager.replicaCount" 1 }}
        ingressShim:
          defaultIssuerName: letsencrypt-prod
          defaultIssuerKind: ClusterIssuer
          defaultIssuerGroup: cert-manager.io
    labels:
      component: cert-manager
      installed: {{ .Values | get "components.certManager.enabled" true }}

  - name: dex
    namespace: {{ .Values.namespace }}
    chart: dex/dex
    version: 0.23.0
    needs:
      - postgres-operator
      - database
      - cert-manager
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            # Exit on error, treat unset variables as errors
            set -eu

            NAMESPACE="{{ .Values.namespace }}"
            # NOTE: This hook generates INTERNAL certs (dex-tls), not the ingress cert.
            #       The ingress cert (unbind-domain-tls) should be handled by cert-manager.
            BASE_DOMAIN="{{ .Values.baseDomain }}"
            GREEN='\033[0;32m'
            NC='\033[0m'
            YELLOW='\033[0;33m'

            # Helper function to safely create secrets without failing when they exist
            safe_create_secret() {
              local name="$1" # Secret name for messages and 'get' check
              shift # Remove the name, $@ now holds args for 'create'
              echo "Ensuring $name secret exists..."
              # Try creating using the remaining arguments ($@)
              # Suppress stdout/stderr on the create attempt
              if kubectl create "$@" >/dev/null 2>&1; then
                echo -e "${GREEN}✓ Created $name secret${NC}"
                return 0 # Success
              else
                # Creation failed, check if it's because it already exists
                if kubectl get secret "$name" -n "$NAMESPACE" &>/dev/null; then
                  echo -e "${YELLOW}$name secret already exists. Skipping creation.${NC}"
                  return 0 # Success (already exists)
                else
                  # It failed AND it doesn't exist -> indicates a real error
                  echo "Error: Failed to create $name secret and it does not exist. Check permissions or kubectl logs." >&2
                  return 1 # Indicate failure
                fi
              fi
            }

            # === Part 1: Client Secrets ===
            echo "Processing dex-client-secrets..."
            CLIENT_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
            CONNECTOR_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)

            # Use the safe_create_secret function
            safe_create_secret "dex-client-secrets" \
              secret generic dex-client-secrets \
              --namespace="$NAMESPACE" \
              --from-literal=unbind-api-secret="${CLIENT_SECRET}" \
              --from-literal=connector-oidc-secret="${CONNECTOR_SECRET}"

            # === Part 2: TLS Certificates (Internal mTLS) ===
            echo "Processing dex-tls secret..."
            # Check if TLS secret exists before attempting complex generation
            if ! kubectl get secret dex-tls -n "$NAMESPACE" &> /dev/null; then
              echo "Generating TLS certificates for Dex (internal use)..."

              CERT_DIR=$(mktemp -d)
              trap 'rm -rf -- "$CERT_DIR"' EXIT

              DEX_SVC_NAME="dex"
              DEX_SVC_FQDN="${DEX_SVC_NAME}.${NAMESPACE}.svc.cluster.local"
              DEX_EXTERNAL_HOST="{{ printf "unbind.%s" .Values.baseDomain }}"

              echo "Generating Root CA..."
              openssl genrsa -out "$CERT_DIR/ca.key" 4096
              openssl req -x509 -new -nodes -key "$CERT_DIR/ca.key" -sha256 -days 6650 \
                -out "$CERT_DIR/ca.crt" -subj "/CN=Unbind Dex Internal CA"

              echo "Generating certificate for Dex service..."
              openssl genrsa -out "$CERT_DIR/dex.key" 2048
              openssl req -new -key "$CERT_DIR/dex.key" -out "$CERT_DIR/dex.csr" \
                -subj "/CN=$DEX_SVC_FQDN"

              printf '%s\n' \
                'authorityKeyIdentifier=keyid,issuer' \
                'basicConstraints=CA:FALSE' \
                'keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment' \
                'subjectAltName = @alt_names' \
                '[alt_names]' \
                "DNS.1 = $DEX_SVC_NAME" \
                "DNS.2 = $DEX_SVC_FQDN" \
                "DNS.3 = $DEX_EXTERNAL_HOST" \
                > "$CERT_DIR/dex.ext"

              echo "Signing Dex certificate..."
              openssl x509 -req -in "$CERT_DIR/dex.csr" -CA "$CERT_DIR/ca.crt" -CAkey "$CERT_DIR/ca.key" \
                -CAcreateserial -out "$CERT_DIR/dex.crt" -days 6650 -sha256 \
                -extfile "$CERT_DIR/dex.ext"
              echo -e "${GREEN}✓ Certificates generated${NC}"

              # Use the safe_create_secret function for the TLS secret
              safe_create_secret "dex-tls" \
                secret tls dex-tls \
                --namespace="$NAMESPACE" \
                --cert="$CERT_DIR/dex.crt" \
                --key="$CERT_DIR/dex.key"

              # Only patch if the secret exists (either we just created it or it existed already)
              if kubectl get secret dex-tls -n "$NAMESPACE" &> /dev/null; then
                CA_CRT_BASE64=$(base64 -w 0 < "$CERT_DIR/ca.crt")
                
                echo "Patching dex-tls secret to include ca.crt..."
                # Use || true to prevent failure even if patch fails
                kubectl patch secret dex-tls -n "$NAMESPACE" --type='json' \
                  -p="[{\"op\": \"add\", \"path\": \"/data/ca.crt\", \"value\": \"$CA_CRT_BASE64\"}]" || \
                  echo -e "${YELLOW}Warning: Failed to patch dex-tls secret with CA certificate.${NC}"
                
                echo -e "${GREEN}✓ TLS certificates for Dex processed${NC}"
              fi
            else
              echo -e "${YELLOW}Internal TLS secret dex-tls already exists.${NC}"
            fi

            echo "Dex secrets/certs processing complete."
    values:
      -
        image:
          repository: ghcr.io/dexidp/dex
          tag: "{{ .Values | get "overrides.dex.version" "v2.42.0" }}"
          pullPolicy: IfNotPresent

        replicaCount: {{ .Values | get "overrides.dex.replicaCount" 2 }}

        https:
          enabled: true

        configSecret:
          create: true

        config:
          issuer: {{ .Values | get "overrides.dex.issuer" (printf "https://unbind.%s/api/dex" .Values.baseDomain) }}
          storage:
            type: postgres
            config:
              host: {{ .Values | get "overrides.dex.postgres.host" (printf "pg-unbind.%s" .Values.namespace) }}
              port: {{ .Values | get "overrides.dex.postgres.port" 5432 }}
              database: {{ .Values | get "overrides.dex.postgres.database" "dex" }}
              user: {{ printf "$%s" "POSTGRES_USER" }}
              password: {{ printf "$%s" "POSTGRES_PASSWORD" }}
              ssl:
                mode: {{ .Values | get "overrides.dex.postgres.ssl.mode" "disable" }}
          web:
            https: 0.0.0.0:5554
            tlsCert: /etc/dex/tls/tls.crt
            tlsKey: /etc/dex/tls/tls.key
          issuers: {{ .Values | get "overrides.dex.issuers" (list (printf "https://unbind.%s/api/dex" .Values.baseDomain) (printf "https://dex.%s.svc.cluster.local:5554" .Values.namespace)) | toYaml | nindent 12 }}
          oauth2:
            skipApprovalScreen: {{ .Values | get "overrides.dex.oauth2.skipApprovalScreen" true }}
            responseTypes: {{ .Values | get "overrides.dex.oauth2.responseTypes" (list "code") | toYaml | nindent 14 }}
            alwaysIssueOfflineToken: {{ .Values | get "overrides.dex.oauth2.alwaysIssueOfflineToken" true }}
          expiry:
            idTokens: {{ .Values | get "overrides.dex.expiry.idTokens" "1h" }}
            accessTokens: {{ .Values | get "overrides.dex.expiry.accessTokens" "1h" }}
            refreshTokens:
              validIfNotUsedFor: {{ .Values | get "overrides.dex.expiry.refreshTokens.validIfNotUsedFor" "336h" }}
              disableRotation: {{ .Values | get "overrides.dex.expiry.refreshTokens.disableRotation" true }}
          connectors:
            {{ .Values | get "overrides.dex.connectors" (list (dict
              "type" "oidc"
              "id" "unbind-oidc"
              "name" "Unbind Built-in OIDC Provider"
              "config" (dict
                "issuer" (printf "https://unbind.%s/api/oauth2" .Values.baseDomain)
                "clientID" "dex-client"
                "clientSecret" (printf "$%s" "CONNECTOR_SECRET")
                "redirectURI" (printf "https://unbind.%s/api/dex/callback" .Values.baseDomain)
                "scopes" (list "openid" "profile" "email" "offline_access" "groups")
                "insecureEnableGroups" true
                "discoveryURL" (printf "https://unbind.%s/api/oauth2/.well-known/openid-configuration" .Values.baseDomain)
                "userIDKey" "jti"
                "claimMapping" (dict "email" "email" "name" "name" "groups" "groups")
              )
            )) | toYaml | nindent 12 }}
          staticClients:
            - id: unbind-api
              secretEnv: CLIENT_SECRET
              name: Unbind API
              redirectURIs:
                - {{ printf "https://unbind.%s/api-internal/auth/callback/dex" .Values.baseDomain }}
                - {{ printf "https://unbind.%s/api/auth/callback" .Values.baseDomain }}
              responseTypes: {{ .Values | get "overrides.dex.staticClients.unbindApi.responseTypes" (list "code") | toYaml | nindent 16 }}

        envVars:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values | get "overrides.dex.postgres.secretName" "dex.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values | get "overrides.dex.postgres.secretName" "dex.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                key: password
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: dex-client-secrets
                key: unbind-api-secret
          - name: CONNECTOR_SECRET
            valueFrom:
              secretKeyRef:
                name: dex-client-secrets
                key: connector-oidc-secret

        securityContext:
          runAsNonRoot: true
          runAsUser: 1000

        resources:
          requests:
            memory: "10Mi"
            cpu: "10m"
          limits:
            cpu: {{ .Values | get "overrides.dex.resources.limits.cpu" "200m" }}
            memory: {{ .Values | get "overrides.dex.resources.limits.memory" "256Mi" }}

        ingress:
          enabled: {{ .Values | get "overrides.dex.ingress.enabled" true }}
          className: {{ .Values | get "overrides.dex.ingress.className" "nginx" }}
          annotations:
            kubernetes.io/tls-acme: "true"
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/rewrite-target: /$2
            nginx.ingress.kubernetes.io/use-regex: "true"
            {{- with .Values | get "overrides.dex.ingress.annotations" dict }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          hosts:
            - host: {{ .Values | get "overrides.dex.host" (printf "unbind.%s" .Values.baseDomain) }}
              backend:
                service:
                  name: dex
                  port:
                    # Target the Service's HTTPS port (default 5554)
                    number: 5554
              paths:
                - path: /api/dex(/|$)(.*)
                  pathType: ImplementationSpecific
          tls:
            - secretName: {{ .Values.tlsSecretName }}
              hosts:
                - {{ .Values | get "overrides.dex.host" (printf "unbind.%s" .Values.baseDomain) }}

        volumes:
          - name: tls-certs
            secret:
              secretName: dex-tls

        volumeMounts:
          - name: tls-certs
            mountPath: /etc/dex/tls
            readOnly: true

    labels:
      component: dex
      installed: {{ .Values | get "components.dex.enabled" true }}

  - name: kube-oidc-proxy
    namespace: {{ .Values.namespace }}
    chart: ./charts/kube-oidc-proxy
    needs:
      - dex
    values:
      -
        replicaCount: {{ .Values | get "overrides.kubeOidcProxy.replicaCount" 2 }}
        image:
          repository: {{ .Values | get "overrides.kubeOidcProxy.image.repository" "unbindapp/kube-oidc-proxy" }}
          tag: {{ .Values | get "overrides.kubeOidcProxy.image.tag" "master-13812109543" }}
          pullPolicy: {{ .Values | get "overrides.kubeOidcProxy.image.pullPolicy" "IfNotPresent" }}

        oidc:
          # Point to the new external Dex issuer URL path
          issuerUrl: {{ .Values | get "overrides.kubeOidcProxy.oidc.issuerUrl" (printf "https://unbind.%s/api/dex" .Values.baseDomain) }}
          # Use the CA from the internal dex-tls secret if connecting directly to service, or system CA if via ingress
          # Assuming connection via ingress - needs CA cert if ingress TLS is not publicly trusted (e.g. self-signed)
          # For Let's Encrypt, caFile shouldn't be needed.
          # caFile: /etc/oidc/ca.crt # Mount this if needed
          clientId: {{ .Values | get "overrides.kubeOidcProxy.oidc.clientId" "unbind-api" }} # Client ID registered in Dex
          usernameClaim: {{ .Values | get "overrides.kubeOidcProxy.oidc.usernameClaim" "email" }}
          groupsClaim: {{ .Values | get "overrides.kubeOidcProxy.oidc.groupsClaim" "groups" }}
          # tlsSecretName points to the internal secret used by Dex for mTLS, kube-oidc-proxy might need the CA part
          # Let's mount the CA part of dex-tls if needed for validation
          # tlsSecretName: {{ .Values | get "overrides.kubeOidcProxy.oidc.tlsSecretName" "dex-tls" }}

        service:
          type: {{ .Values | get "overrides.kubeOidcProxy.service.type" "ClusterIP" }}
          port: {{ .Values | get "overrides.kubeOidcProxy.service.port" 443 }}
          targetPort: {{ .Values | get "overrides.kubeOidcProxy.service.targetPort" 443 }}

        resources:
          requests:
            memory: "10Mi"
            cpu: "10m"
          limits:
            cpu: {{ .Values | get "overrides.kubeOidcProxy.resources.limits.cpu" "300m" }}
            memory: {{ .Values | get "overrides.kubeOidcProxy.resources.limits.memory" "256Mi" }}

        rbac:
          create: {{ .Values | get "overrides.kubeOidcProxy.rbac.create" true }}
          viewerCreate: {{ .Values | get "overrides.kubeOidcProxy.rbac.viewerCreate" true }}
          viewerGroupName: {{ .Values | get "overrides.kubeOidcProxy.rbac.viewerGroupName" "oidc:users" }}

        # Example volume mount if CA cert is needed for issuer URL validation
        # volumes:
        #   - name: oidc-ca
        #     secret:
        #       secretName: dex-tls # Or the appropriate CA secret
        #       items:
        #         - key: ca.crt
        #           path: ca.crt
        # volumeMounts:
        #   - name: oidc-ca
        #     mountPath: /etc/oidc
        #     readOnly: true

    labels:
      component: auth
      installed: {{ .Values | get "components.kubeOidcProxy.enabled" true }}

    # * Unbind operator
  - name: unbind-operator
    namespace: {{ .Values.namespace }}
    chart: ./charts/unbind-operator
    values:
      -
        controllerManager:
          container:
            image:
              repository: {{ .Values | get "overrides.unbind.operator.repository" "unbindapp/unbind-operator" }}
              tag: {{ .Values | get "overrides.unbind.operator.tag" "latest" }}
    labels:
      component: unbind-operator
      installed: true

  # Unbind App section of helmfile.yaml
  - name: unbind-app
    namespace: '{{ .Values.namespace }}'
    chart: ./charts/unbind  # Local path to your chart
    needs:
      - valkey
      - database
      - buildkit
      - registry
      - dex # Added dependency
    hooks:
      # ... (presync hook for secret creation remains the same) ...
      - events: ["presync"]
        showlogs: true
        command: "/bin/sh"
        args:
          - "-c"
          - |
            # Exit on error, treat unset variables as errors
            set -eu

            NAMESPACE="{{ .Values.namespace }}"
            GREEN='\033[0;32m'
            NC='\033[0m'
            YELLOW='\033[0;33m'

            # Function to safely create a secret if it doesn't exist
            # Usage: safe_create_secret <secret-name-for-checks> <kubectl create secret args...>
            safe_create_secret() {
              local name="$1" # Secret name for messages and 'get' check
              shift          # Remove the name, $@ now holds args for 'create'

              echo "Ensuring $name secret exists..."
              # Try creating using the remaining arguments ($@)
              # Suppress stdout/stderr on the create attempt
              if kubectl create secret "$@" >/dev/null 2>&1; then
                echo -e "${GREEN}✓ Created $name secret${NC}"
                return 0 # Success
              else
                # Creation failed, check if it's because it already exists
                if kubectl get secret "$name" -n "$NAMESPACE" &>/dev/null; then
                  echo -e "${YELLOW}$name secret already exists. Skipping creation.${NC}"
                  return 0 # Success (already exists)
                else
                  # It failed AND it doesn't exist -> indicates a real error
                  echo "Error: Failed to create $name secret and it does not exist. Check permissions or kubectl logs." >&2
                  return 1 # Indicate failure
                fi
              fi
            }

            # === Part 1: Auth.js Secret ===
            echo "Processing unbind-authjs-secrets..."
            # Generate potential secret value (only used if creation happens)
            AUTH_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)

            # Call the function to handle creation/checking idempotently
            if ! safe_create_secret "unbind-authjs-secrets" generic unbind-authjs-secrets \
              --namespace="$NAMESPACE" \
              --from-literal=auth-secret="${AUTH_SECRET}"; then
              # Function returned failure (a real error occurred, not just AlreadyExists)
              echo "Error: Failed to ensure unbind-authjs-secrets exists. Halting hook." >&2
              # set -eu will cause script to exit non-zero here anyway
              exit 1
            fi

            # === Part 2: Dex Client Secrets (Ensure consistency with Dex hook) ===
            # Note: This might be redundant if the Dex presync hook always runs first,
            # but keeping it ensures the secret exists even if only unbind-app is deployed/upgraded.
            echo "Processing dex-client-secrets..."
            # Generate potential secret values (only used if creation happens)
            CLIENT_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)
            CONNECTOR_SECRET=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)

            # Call the function to handle creation/checking idempotently
            if ! safe_create_secret "dex-client-secrets" generic dex-client-secrets \
              --namespace="$NAMESPACE" \
              --from-literal=unbind-api-secret="${CLIENT_SECRET}" \
              --from-literal=connector-oidc-secret="${CONNECTOR_SECRET}"; then
              echo "Error: Failed to ensure dex-client-secrets exists. Halting hook." >&2
              exit 1
            fi

            echo "Secret checks/creation complete."
    values:
      # Global values
      - global:
          namespace: '{{ .Values.namespace }}'
          baseDomain: '{{ .Values.baseDomain }}'

      # Define ingress defaults used by sub-components if not overridden
      - ingress:
          enabled: true # Master switch for ingress resources in this chart
          host: {{ printf "unbind.%s" .Values.baseDomain }}
          className: {{ .Values | get "overrides.ingress.className" "nginx" }} # Global override for class
          # Common annotations can go here
          annotations:
             kubernetes.io/tls-acme: "true"
             nginx.ingress.kubernetes.io/ssl-redirect: "true"
          tls:
            secretName: {{ .Values.tlsSecretName }}

      # UI Configuration
      - ui:
          enabled: true
          name: unbind-ui
          image:
            repository: {{ .Values | get "overrides.unbind.ui.repository" "unbindapp/unbind-ui" }}
            tag: {{ .Values | get "overrides.unbind.ui.tag" "latest" }}
            pullPolicy: {{ .Values | get "overrides.unbind.ui.pullPolicy" "Always" }}
          replicaCount: {{ .Values | get "overrides.unbind.ui.replicaCount" 2 }}
          resources:
            requests:
              memory: "10Mi"
              cpu: "10m"
            limits:
              cpu: {{ .Values | get "overrides.unbind.ui.resources.limits.cpu" "500m" }}
              memory: {{ .Values | get "overrides.unbind.ui.resources.limits.memory" "1Gi" }}
          containerPort: 3000
          service:
            type: ClusterIP
            port: 3000
          ingress:
            enabled: true # Controlled by global .Values.ingress.enabled potentially
            # Path defaults to '/' from the chart's ingress template if not specified here
          env:
            - name: AUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: unbind-authjs-secrets
                  key: auth-secret
            - name: AUTH_URL # Internal NextAuth endpoint
              value: {{ printf "https://unbind.%s/api-internal/auth" .Values.baseDomain }}
            - name: DEX_CLIENT_ID # Client ID UI uses to talk to Dex
              value: {{ .Values | get "overrides.unbind.ui.dex.clientId" "unbind-api" }}
            - name: DEX_CLIENT_SECRET # Secret UI uses to talk to Dex
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.ui.dex.secretName" "dex-client-secrets" }}
                  key: {{ .Values | get "overrides.unbind.ui.dex.secretKey" "unbind-api-secret" }}
            # Update Dex Issuer URL to use the new path
            - name: DEX_ISSUER
              value: {{ printf "https://unbind.%s/api/dex" .Values.baseDomain }}
            - name: UNBIND_API_PUBLIC_URL # Public URL for browser to reach API
              value: {{ printf "https://unbind.%s/api" .Values.baseDomain }}
            - name: SITE_URL # Base site URL
              value: {{ printf "https://unbind.%s" .Values.baseDomain }}

      # API Configuration
      - api:
          enabled: true
          name: unbind-api
          image:
            repository: {{ .Values | get "overrides.unbind.api.repository" "unbindapp/unbind-api" }}
            tag: {{ .Values | get "overrides.unbind.api.tag" "latest" }}
            pullPolicy: {{ .Values | get "overrides.unbind.api.pullPolicy" "Always" }}
          replicaCount: {{ .Values | get "overrides.unbind.api.replicaCount" 2 }}
          resources:
            requests:
              memory: "10Mi"
              cpu: "10m"
            limits:
              cpu: {{ .Values | get "overrides.unbind.api.resources.limits.cpu" "500m" }}
              memory: {{ .Values | get "overrides.unbind.api.resources.limits.memory" "2Gi" }}
          containerPort: 8089
          service:
            type: ClusterIP
            port: 8089
          ingress:
            enabled: true # Controlled by global .Values.ingress.enabled potentially
            # Path defaults to '/api' from the chart's ingress template if not specified here
          command: ["/app/api"]
          env:
            - name: SYSTEM_NAMESPACE
              value: {{ .Values.namespace }}
            - name: EXTERNAL_UI_URL
              value: {{ printf "https://unbind.%s" .Values.baseDomain }}
            - name: EXTERNAL_API_URL
              value: {{ printf "https://unbind.%s/api" .Values.baseDomain }}
            - name: EXTERNAL_WILDCARD_BASE_URL
              value: {{ printf "https://%s" .Values.baseDomain }}
            - name: POSTGRES_HOST
              value: {{ .Values | get "overrides.unbind.api.database.host" (printf "pg-unbind.%s" .Values.namespace) }}
            - name: POSTGRES_PORT
              value: {{ .Values | get "overrides.unbind.api.database.port" "5432" | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.api.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.api.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: password
            - name: POSTGRES_DB
              value: {{ .Values | get "overrides.unbind.api.database.name" "unbind" }}
            - name: VALKEY_URL
              value: {{ .Values | get "overrides.unbind.api.valkey.url" (printf "valkey-headless.%s:6379" .Values.namespace) }}
            # Update Dex URLs to use the new path
            - name: DEX_ISSUER_URL # Internal URL API uses to validate tokens (might be service FQDN or ingress)
              value: {{ .Values | get "overrides.unbind.api.dex.issuerUrl" (printf "https://unbind.%s/api/dex" .Values.baseDomain) }}
            - name: DEX_ISSUER_URL_EXTERNAL # Public URL API might need to construct redirects etc.
              value: {{ .Values | get "overrides.unbind.api.dex.issuerUrlExternal" (printf "https://unbind.%s/api/dex" .Values.baseDomain) }}
            - name: DEX_CLIENT_ID # Client ID API uses to talk to Dex (e.g., for callbacks)
              value: {{ .Values | get "overrides.unbind.api.dex.clientId" "unbind-api" }}
            - name: DEX_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.api.dex.secretName" "dex-client-secrets" }}
                  key: {{ .Values | get "overrides.unbind.api.dex.secretKey" "unbind-api-secret" }}
            - name: KUBE_PROXY_URL
              value: {{ .Values | get "overrides.unbind.api.kubeProxyUrl" (printf "https://kube-oidc-proxy.%s.svc.cluster.local:443" .Values.namespace) }}
            - name: BUILD_IMAGER
              value: {{ .Values | get "overrides.unbind.api.buildImager" "unbindapp/unbind-builder:latest" }}
            - name: BUILDER_NAMESPACE
              value: {{ .Values.namespace }}
            # Update Registry Host URL to use the new path
            - name: BOOTSTRAP_CONTAINER_REGISTRY_HOST
              value: {{ .Values | get "overrides.unbind.api.registry.host" (printf "unbind.%s/api/docker-registry" .Values.baseDomain) }}
            - name: BOOTSTRAP_CONTAINER_REGISTRY_USER
              valueFrom:
                secretKeyRef:
                  name: registry-credentials
                  key: username
            - name: BOOTSTRAP_CONTAINER_REGISTRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-credentials
                  key: password
            - name: BUILDKIT_HOST
              value: {{ $hostValue := .Values | get "overrides.unbind.api.buildkit.host" "" }}
                    {{- if $hostValue }}
                    {{- $hostValue }}
                    {{- else }}
                    {{- printf "tcp://buildkitd.%s:1234" .Values.namespace }}
                    {{- end }}
            - name: LOKI_ENDPOINT
              value: {{ .Values | get "overrides.unbind.api.loki.endpoint" (printf "http://loki-gateway.%s.svc.cluster.local" .Values.namespace) }}
            - name: PROMETHEUS_ENDPOINT
              value: {{ .Values | get "overrides.unbind.api.prometheus.endpoint" (printf "http://kube-prometheus-stack-prometheus.%s:9090" .Values.namespace) }}

      # Auth Service Configuration
      - auth:
          enabled: true
          name: unbind-auth
          image:
            repository: {{ .Values | get "overrides.unbind.auth.repository" "unbindapp/unbind-api" }}
            tag: {{ .Values | get "overrides.unbind.auth.tag" "latest" }}
            pullPolicy: {{ .Values | get "overrides.unbind.auth.pullPolicy" "Always" }}
          replicaCount: {{ .Values | get "overrides.unbind.auth.replicaCount" 2 }}
          resources:
            requests:
              memory: "10Mi"
              cpu: "10m"
            limits:
              cpu: {{ .Values | get "overrides.unbind.auth.resources.limits.cpu" "500m" }}
              memory: {{ .Values | get "overrides.unbind.auth.resources.limits.memory" "2Gi" }}
          containerPort: 8090
          service:
            type: ClusterIP
            port: 8090
          ingress:
            enabled: true # Controlled by global .Values.ingress.enabled potentially
            # Path defaults to '/api/oauth2' from the chart's ingress template if not specified here
          command: ["/app/oauth2server"]
          env:
            - name: SYSTEM_NAMESPACE
              value: {{ .Values.namespace }}
            # This is the external URL *of this auth service*
            - name: EXTERNAL_OAUTH2_URL
              value: {{ printf "https://unbind.%s/api/oauth2" .Values.baseDomain }}
            - name: POSTGRES_HOST
              value: {{ .Values | get "overrides.unbind.auth.database.host" (printf "pg-unbind.%s" .Values.namespace) }}
            - name: POSTGRES_PORT
              value: {{ .Values | get "overrides.unbind.auth.database.port" "5432" | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.auth.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.auth.database.secretName" "unbind.pg-unbind.credentials.postgresql.acid.zalan.do" }}
                  key: password
            # Update Dex URLs to use the new path
            - name: DEX_ISSUER_URL # Where this auth service validates tokens from Dex
              value: {{ .Values | get "overrides.unbind.auth.dex.issuerUrl" (printf "https://unbind.%s/api/dex" .Values.baseDomain) }}
            - name: DEX_ISSUER_URL_EXTERNAL # External URL if needed
              value: {{ .Values | get "overrides.unbind.auth.dex.issuerUrlExternal" (printf "https://unbind.%s/api/dex" .Values.baseDomain) }}
            - name: DEX_CLIENT_ID # Client ID this service uses when talking *to* Dex (e.g. for its own OIDC connector config)
              value: {{ .Values | get "overrides.unbind.auth.dex.clientId" "dex-client" }} # Matches connector clientID in Dex config
            - name: DEX_CLIENT_SECRET # Secret for the client ID above
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.auth.dex.secretName" "dex-client-secrets" }}
                  key: {{ .Values | get "overrides.unbind.auth.dex.secretKey" "connector-oidc-secret" }} # Matches connector secret in Dex config
            - name: DEX_CONNECTOR_SECRET # This seems duplicated - remove if DEX_CLIENT_SECRET above is correct
              valueFrom:
                secretKeyRef:
                  name: {{ .Values | get "overrides.unbind.auth.dex.secretName" "dex-client-secrets" }}
                  key: connector-oidc-secret
            - name: VALKEY_URL
              value: {{ .Values | get "overrides.unbind.auth.valkey.url" (printf "valkey-headless.%s:6379" .Values.namespace) }}

      # Service Account and RBAC
      - serviceAccount:
          create: true
          name: unbind-api-sa
          annotations: {}
      - rbac:
          create: true
      - builder:
          rbac:
            create: true
            clusterRoleName: "app-crd-creator"
            clusterRoleBindingName: "app-crd-creator-binding"
          serviceAccount:
            create: true
            name: "builder-serviceaccount"
            annotations: {}

    labels:
      component: unbind-app
      installed: true