# helmfile.yaml
# Main Helmfile configuration
# Repositories
repositories:
  - name: longhorn
    url: https://charts.longhorn.io
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
  - name: postgres-operator
    url: https://opensource.zalando.com/postgres-operator/charts/postgres-operator
  - name: grafana
    url: https://grafana.github.io/helm-charts 

# Environment values are loaded from environment-specific files
environments:
  default:
    values:
      - environments/default.yaml
# Configure "requires" for dependencies between releases
helmDefaults:
  wait: true
  timeout: 600
  atomic: true
  createNamespace: true
---
# Releases
releases:
  # Managed Helm Charts with version locks
  - name: longhorn
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: longhorn/longhorn
    version: 1.8.1 # Lock to specific version for compatibility
    values:
      - values/longhorn.yaml
      # This is where we add dynamic values that get merged into the chart
      - persistence:
          defaultClass: {{ .Environment.Values | get "overrides.longhorn.persistence.defaultClass" true }}
          defaultClassReplicaCount: {{ .Environment.Values | get "overrides.longhorn.persistence.defaultClassReplicaCount" }}
          reclaimPolicy: {{ .Environment.Values | get "overrides.longhorn.persistence.reclaimPolicy" }}
        defaultSettings:
          defaultReplicaCount: {{ .Environment.Values | get "overrides.longhorn.defaultSettings.defaultReplicaCount" }}
    labels:
      component: storage
      installed: {{ .Environment.Values | get "components.longhorn.enabled" true }}

  - name: kube-prometheus-stack
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: prometheus-community/kube-prometheus-stack
    version: 70.4.0 
    values:
      - values/kube-prometheus-stack.yaml
      - prometheus:
          prometheusSpec:
            retention: {{ .Environment.Values | get "overrides.kubePrometheusStack.retention" }}
            storageSpec:
              volumeClaimTemplate:
                spec:
                  resources:
                    requests:
                      storage: {{ .Environment.Values | get "overrides.kubePrometheusStack.storage" }}
    labels:
      component: monitoring
      installed: {{ .Environment.Values | get "components.kubePrometheusStack.enabled" true }}

  - name: alloy
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: grafana/alloy
    version: 0.12.6
    values:
      - 
        alloy:
          mounts:
            varlog: true
          configMap:
            content: |
              logging {
                level  = "info"
                format = "logfmt"
              }
              discovery.kubernetes "pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-team,unbind-project,unbind-environment,unbind-service"
                }
              }
              discovery.kubernetes "deployment_pods" {
                role = "pod"
                selectors {
                  role = "pod"
                  label = "unbind-deployment"
                }
              }
              discovery.relabel "pods" {
                targets = discovery.kubernetes.pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_team"]
                  target_label  = "unbind_team"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_project"]
                  target_label  = "unbind_project"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_environment"]
                  target_label  = "unbind_environment"
                }
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_service"]
                  target_label  = "unbind_service"
                }
              }
              discovery.relabel "deployment_pods" {
                targets = discovery.kubernetes.deployment_pods.targets
                rule {
                  action        = "replace"
                  source_labels = ["__meta_kubernetes_pod_label_unbind_deployment"]
                  target_label  = "unbind_deployment"
                }
              }
              loki.source.kubernetes "pods" {
                targets = discovery.relabel.pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.source.kubernetes "deployment_pods" {
                targets = discovery.relabel.deployment_pods.output
                forward_to = [loki.write.endpoint.receiver]
              }
              loki.write "endpoint" {
                endpoint {
                  url = "http://{{ .Environment.Values | get "overrides.alloy.loki.endpoint.host" }}.{{ .Environment.Values | get "overrides.alloy.loki.namespace" .Environment.Values.global.namespace }}.svc.cluster.local:{{ .Environment.Values | get "overrides.alloy.loki.endpoint.port" "80" }}/loki/api/v1/push"
                  tenant_id = "local"
                }
              }

    labels:
      component: alloy
      installed: {{ .Environment.Values | get "components.alloy.enabled" true }}

  - name: loki
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: grafana/loki
    version: 6.29.0
    values:
      - 
        loki:
          auth_enabled: false
          commonConfig:
            replication_factor: 1
          schemaConfig:
            configs:
              - from: "2024-04-01"
                store: tsdb
                object_store: s3
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h    
          pattern_ingester:
            enabled: true
          limits_config:
            max_concurrent_tail_requests: 100
            allow_structured_metadata: true
            volume_enabled: true
            retention_period: {{ .Environment.Values | get "overrides.loki.retentionPeriod" }} 
          ruler:
            enable_api: true
          tableManager:
            retention_deletes_enabled: true
            retention_period: {{ .Environment.Values | get "overrides.loki.retentionPeriod" }}

        minio:
          enabled: true
          persistence:
            enabled: trueâˆ‚
            size: {{ .Environment.Values | get "overrides.loki.minioStorageSize" }}

        deploymentMode: SingleBinary
        singleBinary:
          replicas: 1
          persistence:
            enabled: true
            size: {{ .Environment.Values | get "overrides.loki.storageSize" }}

        # Zero out replica counts of other deployment modes
        backend:
          replicas: 0
        read:
          replicas: 0
        write:
          replicas: 0
        ingester:
          replicas: 0
        querier:
          replicas: 0
        queryFrontend:
          replicas: 0
        queryScheduler:
          replicas: 0
        distributor:
          replicas: 0
        compactor:
          replicas: 0
        indexGateway:
          replicas: 0
        bloomCompactor:
          replicas: 0
        bloomGateway:
          replicas: 0


    labels:
      component: loki
      installed: {{ .Environment.Values | get "components.loki.enabled" true }}

  - name: buildkit
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/buildkitd
    values:
      - 
        resources: {}
        replicaCount: {{ .Environment.Values | get "overrides.buildkitd.replicas" }}
        image:
          repository: {{ .Environment.Values | get "overrides.buildkitd.image" }}
        registries:
          - url: {{ .Environment.Values | get "overrides.buildkitd.registry" (printf "docker-registry.%s:5000" (.Environment.Values | get "global.namespace")) }}
            http: true
            insecure: true

    labels:
      component: build
      installed: {{ .Environment.Values | get "components.buildkitd.enabled" true }}

  - name: postgres-operator
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: postgres-operator/postgres-operator
    version: 1.14.0
    values:
      - 
        configGeneral:
          docker_image: {{ .Environment.Values | get "overrides.postgresOperator.spiloImage" }}
        configKubernetes:
          inherited_labels:
            - unbind-team
            - unbing-project
            - unbind-environment
            - unbind-service
            - unbind-is-system-db
            # Helm labels
            - app.kubernetes.io/managed-by
            - app.kubernetes.io/name
            - app.kubernetes.io/instance
            - app.kubernetes.io/version
            - helm.sh/chart

    labels:
      component: postgres-operator
      installed: {{ .Environment.Values | get "components.postgresOperator.enabled" true }}
  
  - name: database
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/database
    needs:
      - postgres-operator
    values:
      - 
        replicaCount: {{ .Environment.Values | get "overrides.database.replicaCount" }}
        storage: {{ .Environment.Values | get "overrides.database.storage" }}
        resources:
          requests:
            cpu: {{ .Environment.Values | get "overrides.database.resources.requests.cpu"  }}
            memory: {{ .Environment.Values | get "overrides.database.resources.requests.memory" }}
          limits:
            cpu: {{ .Environment.Values | get "overrides.database.resources.limits.cpu" }}
            memory: {{ .Environment.Values | get "overrides.database.resources.limits.memory" }}
    labels:
      component: database
      installed: {{ .Environment.Values | get "components.database.enabled" true }}

  - name: registry
    namespace: '{{ .Environment.Values | get "global.namespace" }}'
    chart: ./charts/registry
    values:
      - 
        replicaCount: {{ .Environment.Values | get "overrides.registry.replicaCount" }}
        persistence:
          size: {{ .Environment.Values | get "overrides.registry.persistence.size" }}
        service:
          nodePort: {{ .Environment.Values | get "overrides.registry.service.nodePort" }}
        cleanup:
          threshold: {{ .Environment.Values | get "overrides.registry.cleanup.threshold" }} # This should be around 80% of the total size, this is for the auto cleanup job

    labels:
      component: registry
      installed: {{ .Environment.Values | get "components.registry.enabled" true }}